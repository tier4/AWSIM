{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-awsim","title":"Welcome to AWSIM","text":"<p>AWSIM is the best scene simulator for Autoware.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Many predefined components included<ul> <li>Vehicle dynamic models</li> <li>Sensor models</li> <li>Environment configuration </li> <li>ROS2 communication, etc</li> </ul> </li> <li>Support for Ubuntu 22.04</li> <li>ROS2 native communication (humble)</li> <li>Open sourced</li> <li>Made with Unity</li> </ul>"},{"location":"#lets-try-demo-simulation","title":"Let's try demo simulation","text":"<p>Quick start demo</p>"},{"location":"Contact/","title":"Contact","text":"<p>Please feel free to contact us.</p> <ul> <li>GitHub issue</li> <li>e-mail : takatoki.makino@tier4.jp</li> <li>Discord : mackierx111</li> </ul>"},{"location":"DeveloperGuide/Architecture/","title":"Architecture","text":"<p>AWSIM's architecture is designed to meet the requirements of various automated driving simulations. It is designed to be easy to use with key components in a commonly use and with customizability for niche requirements.</p> <ul> <li>Layered architecture is used, with dependencies built at the namespace level.</li> <li>Except for a single scene class within a scene, MonoBehaviour scripts within AWSIM do not use the Unity callbacks for <code>Awake()</code>, <code>Start()</code>, <code>Update()</code>, and <code>FixedUpdate()</code>.<ul> <li>Instead, Public methods such as <code>Initialize()</code> and <code>OnUpdate()</code>, <code>OnFixedUpdate()</code> are called from the scene class.</li> </ul> </li> </ul>"},{"location":"DeveloperGuide/Architecture/#layer","title":"Layer","text":"<p>AWSIM uses a layered architecture. Dependencies are built on the following layers. The layers are separated by the root namespace.</p> <pre><code>flowchart LR\n    Scene --&gt; UI\n    UI --&gt; Usecase\n    Usecase --&gt; Entity\n    Entity --&gt; Common</code></pre> <p>Warning</p> <p>It is a unilateral dependence from left to right. For example, a <code>Usecase</code> layer can depend on a <code>Common</code> layer, but not vice versa.</p> Layer Root namespace Note Mainly features Scene Awsim.Scene The scene layer contains the implementation for that particular scene. Basically, one namespace per scene is supported. (For example, in <code>AutowareSimulationDemo.unity</code> scene is <code>Awsim.Scene.AutowareSimulationDemo</code>). One scene class is assumed to be created for each scene. This scene class will be the entry point and main loop. Features commonly used in multiple scenes are not included in this layer and are not intended for reuse.The Scene layer scripts are used only for each scene, so they are placed under <code>Assets\\Awsim\\Scenes</code>, not under <code>Assets\\Awsim\\Scirpts</code>. \uff65 Scene UI Awsim.UI The UI layer provides a unified UI used by AWSIM. Basically, all UIs inherit from the <code>UIWIndow</code> class and support dragging to move, hide, and scale. UI does not include critical logic in the simulation. Focus on user input and information display. \uff65 UI Usecase Awsim.Usecase The Usecase layer has upstream implementations that depend on Entity.This layer will aggregate functions according to the purpose of each use case. Basically, it is a combined implementation of Entity. \uff65 Create pcd \uff65 Traffic \uff65 Scenario Entity Awsim.Entity The Entity layer provides essential components for automated driving simulation. Entity layer provides components such as vehicles, sensors, infrastructure and pedestrians. These are supposed to be used in combination depending on the simulation content. Basically, initialization and updating is done from higher layers. \uff65 Vehicle \uff65 Pedestrian \uff65 Sensor \uff65 Infra Common Awsim.Common The Common layer has the most primitive implementations. For example, Math, Time, ROS2-related, etc. This layer is independent of the context of automated driving and provides generic functionality. The Common layer is never dependent on any other layer. \uff65 ROS2 \uff65 Geo \uff65 Math \uff65 Time \uff65 Lanelet \uff65 etc."},{"location":"DeveloperGuide/Architecture/#awsim-namespace","title":"AWSIM Namespace","text":"Namespace Feature <code>Awsim.Scene.AutowareSimulationDemo</code> Script used only in <code>AutowareSimulationDemo.unity</code> scene. <code>Awsim.Scene.IntegrateScenarioSimulatorDemo</code> Script used only in <code>IntegrateScenarioSimulatorDemo.unity</code> scene. <code>Awsim.Scene.PcdGenerationDemo</code> Script used only in <code>PcdGenerationDemo.unity</code> scene. <code>Awsim.UI</code> UI scripts. <code>Awsim.Usecase.PcdGeneration</code> Script for pcd generation. <code>Awsim.Usecase.ScenarioSimulatorConnection</code> Script for scenario simulator v2 connection. <code>Awsim.Usecase.TrafficSimulation</code> Script for traffic simulation. <code>Awsim.Entity</code> Scripts included in the <code>Entity</code> layer. <code>Awsim.Common</code> Scripts inlluded in the <code>Common</code> layer."},{"location":"DeveloperGuide/Architecture/#scene-class","title":"Scene class","text":"<p>In AWSIM, the concept of scene classes is one of the most important architectural concepts. For example, in the <code>AutowareSimulationDemo.unity</code> scene, the scene class is AutowareSimulationDemo.cs.</p> <p>Creating a scene class for each scene has the following advantages.</p> <ul> <li>The entry point for the program is clear. Basically, you can understand the flow of the process by simply reading the scene class from the top.</li> <li>Execution order can be controlled at the C# coding level without using Script Execution Order.</li> <li>Initialization and loop processing can be written to suit the scene. For example, if the startup Json configurations differ from scene to scene, creating a scene class for each scene allows for flexible customization.</li> <li>Object creation and destruction, will be managed with the scene class as the top level, making it easier to manage the lifecycle of each instance.</li> <li>Basically, the scene class has a reference by <code>[SerializeField]</code> to the objects in the scene, making it easier to prevent inspector reference explosions.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/","title":"Coding standards","text":"<p>This guide is the coding standard used by AWSIM. Inspired by C# at Google Style Guide  and Unity's CREATE A C# STYLE GUIDE and created with some modifications. Basically, please follow these guidelines for coding.</p>"},{"location":"DeveloperGuide/CodingStandards/#c-formatting-guidelines","title":"C# Formatting guidelines","text":""},{"location":"DeveloperGuide/CodingStandards/#code","title":"Code","text":"<ul> <li>Names of classes, methods, enumerations, public fields, public properties, namespaces: <code>PascalCase</code>.</li> <li>Names of private, protected, internal and protected internal fields and properties: <code>_camelCase</code>. (Use underscore as prefix)</li> <li>Names of local variables, parameters: <code>camelCase</code>. (Not use underscore as prefix)</li> <li>Naming convention is unaffected by modifiers such as const, static, readonly, etc.</li> <li>For casing, a \u201cword\u201d is anything written without internal spaces, including acronyms. For example, <code>MyRpc</code> instead of <code>MyRPC</code>.</li> <li>Names of interfaces start with <code>I</code>, e.g. <code>IInterface</code>.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#files","title":"Files","text":"<ul> <li>Filenames and directory names are <code>PascalCase</code>, e.g. <code>MyFile.cs</code>.</li> <li>Where possible the file name should be the same as the name of the main class in the file, e.g. <code>MyClass.cs</code>.</li> <li>In general, prefer one core class per file.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#organization","title":"Organization","text":"<ul> <li>Modifiers occur in the following order: <code>public protected internal private new abstract virtual override sealed static readonly extern unsafe volatile async</code>.</li> <li><code>private</code> attribute is omitted.</li> <li>Declare using namespaces in order of decreasing dependency, starting from the top. </li> <li>Class member ordering:<ul> <li>Group class members in the following order:<ul> <li>Nested classes, enums, delegates and events.</li> <li>Static, const and readonly fields.</li> <li>Fields and properties.</li> <li>Constructors and finalizers.</li> <li>Methods.</li> </ul> </li> <li>Within each group, elements should be in the following order:<ul> <li>Public.</li> <li>Internal.</li> <li>Protected internal.</li> <li>Protected.</li> <li>Private.</li> </ul> </li> <li>Where possible, group interface implementations together.</li> </ul> </li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#whitespace-rules","title":"Whitespace rules","text":"<ul> <li>A maximum of one statement per line.</li> <li>A maximum of one assignment per statement.</li> <li>Indentation of 4 spaces, no tabs.</li> <li>Column limit: around 140. (Not strictly)</li> <li>Yes line break before opening brace.</li> <li>Yes line break between closing brace and <code>else</code>.</li> <li>Space after <code>if</code>/<code>for</code>/<code>while</code> etc., and after commas.</li> <li>No space after an opening parenthesis or before a closing parenthesis.</li> <li>No space between a unary operator and its operand. One space between the   operator and each operand of all other operators.</li> <li>The following rules apply to line wrapping.<ul> <li>In general, line continuations are indented 4 spaces.</li> <li>Line breaks with braces (e.g. list initializers, lambdas, object   initializers, etc) do not count as continuations.</li> <li>For function definitions and calls, if the arguments do not all fit on   one line they should be broken up onto multiple lines, with each   subsequent line aligned with the first argument. If there is not enough   room for this, arguments may instead be placed on subsequent lines with   a four space indent. The code example below illustrates this.</li> </ul> </li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#example-code","title":"Example code","text":"<pre><code>using System;                   // System is a primitive namespace in C#.\nusing System.Collections;\nusing UnityEngine;              // UnityEngine is a C#-dependent namespace.\nusing UnityEngine.UI;\nusing ROS2;                     // ROS2 is an external ROS2 library available \n                                // in Unity.\nusing Awsim.EgoVehicle;         \nusing Awsim.General;\n\nnamespace Awsim.Sample.SampleNameScope\n{\n    // Write XML comments in the public attribute.\n    /// &lt;summary&gt;\n    /// XML comments.                                                \n    /// &lt;/summary&gt;\n    public interface ISampleInterface // Interfaces start with 'I'\n    {\n        // Methods are PascalCase ...and space after comma.\n        public int Calculate(float value, float exp);\n    }\n\n    /// &lt;summary&gt;\n    /// XML comments.\n    /// &lt;/summary&gt;\n    public enum SampleEnum      // Enumerations are PascalCase.\n    {\n        Yes,                    // Enumerators are PascalCase.\n        No,\n    }\n\n    /// &lt;summary&gt;\n    /// XML comments.\n    /// &lt;/summary&gt;\n    public class SampleClass    // Classes are PascalCase.\n    {\n        // Group class members in the following order:\n        //     1. Nested classes, enums, delegates and events.\n        //     2. Static, const and readonly fields.\n        //     3. Properties and fields.\n        //     4. Constructors and finalizers.\n        //     5. Methods.\n\n        /// &lt;summary&gt;\n        /// XML comments.\n        /// &lt;/summary&gt;                                              \n        // Within the same group, those with public \n        // attributes are described higher.\n        public class InnerPublicClass\n        {\n            /// &lt;summary&gt;\n            /// XML comments.\n            /// &lt;/summary&gt;\n            // Public member variables are PascalCase.\n            // Public member variables are basically properties.\n            // Field initializers are encouraged.\n            public int Foo { get; set; } = 0;           \n\n            /// &lt;summary&gt;\n            /// XML comments.\n            /// &lt;/summary&gt;\n            // For single line read-only properties, \n            // prefer expression body properties (=&gt;) when possible.\n        }\n            public int Bar =&gt; Foo;                                  \n\n        // Private attributes are omitted.\n        class InnerPrivateClass\n        {\n\n        }\n\n        /// &lt;summary&gt;\n        /// XML comments.\n        /// &lt;/summary&gt;\n        // const does not affect naming convention.\n        public const string ConstKey = \"ConstKey\";                  \n\n        // protected member variables are _camelCase.\n        protected const string _constKey2 = \"ConstKey2\";             \n\n        // Private member variables are _camelCase.\n        InnerPublicClass _class = null;\n\n        int _value = 0;                                             \n\n        // Arrays are initialized on a single line, if possible.\n        int[] _someShortTable = { 2, 3, 4, };              \n\n        // If the element is long, break lines.\n        int[] _someLongTable = new int[3]                           \n        {\n            2,\n            3,\n            4,\n        };\n\n        // Matrices, etc. may break lines for easier comprehension.\n        int[] _matrix = new int[9]                                  \n        {\n            0, 1, 2,\n            3, 4, 5,\n            6, 7, 8\n        };\n\n        // String uses an empty string instead of null.\n        string _sampleStr = String.Empty;\n\n        /// &lt;summary&gt;\n        /// XML comments.\n        /// &lt;/summary&gt;\n        public SampleClass()\n        {\n            _class = new InnerPublicClass\n            {\n                // Object initializer use a 4 space indent.\n                Foo = 1,                                            \n            };\n        }\n\n        /// &lt;summary&gt;\n        /// XML comments.\n        /// &lt;/summary&gt;\n        // No line break before opening brace.\n        public int Add(int addValue, bool useLog)                   \n        {\n            // Local variables are camelCase.\n            var resultValue = _value + addValue;                    \n\n            if (useLog)\n            {\n                var sign = MathF.Sign(resultValue);\n                var isMinusValue = sign &lt; 0;\n\n                // No space after unary operator and space after 'if'.\n                if (!isMinusValue)                                  \n                {\n                    Log(\"Sum is minus value : \", resultValue);\n                }\n                else\n                {\n                    Log(\"Sum is plus value : \", resultValue);\n                }\n            }\n\n            return resultValue;\n\n            // Use of local functions is recommended.\n            void Log(string prefix, int value)                      \n            {\n                Debug.Log(prefix + value);\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// XML comments.\n        /// &lt;/summary&gt;\n        public void ExpressionBodies()\n        {\n            // For simple lambdas, fit on one line if possible, \n            // no brackets or braces required.\n            Func&lt;int, int&gt; increment = x =&gt; x + 1;\n\n            // A block of lambda expressions is written on a new line.\n            Func&lt;int, int, long&gt; difference1 = (x, y) =&gt;\n            {\n                long diff = (long)x - y;\n                return diff &gt;= 0 ? diff : -diff;\n            };\n        }\n\n        void DoNothing() { }    // Empty blocks may be concise.\n\n        // If possible, wrap arguments \n        // by aligning newlines with the first argument.\n        void LongFunctionNameThatCausesLineWrappingProblems(int ArgumentName,\n                                                            int p1, \n                                                            int p2)\n        {\n\n        }\n\n        // If aligning argument lines with the first argument doesn't fit, \n        // or is difficult to read, wrap all arguments \n        // on new lines with a 4 space indent.\n        void AnotherLongFunctionNameThatCausesLineWrappingProblems(\n            int longArgumentName, int longArgumentName2, int longArgumentName3)\n        {\n\n        }\n\n        void CallingLongFunctionName()\n        {\n            int veryLongArgumentName = 1234;\n            int shortArg = 1;\n            // If possible, wrap arguments \n            // by aligning newlines with the first argument.\n            LongFunctionNameThatCausesLineWrappingProblems(shortArg, \n                                                           shortArg,\n                                                           LongArgumentName);\n\n\n            // If aligning argument lines with the first argument doesn't fit, \n            // or is difficult to read, \n            // wrap all arguments on new lines with a 4 space indent.\n            LongFunctionNameThatCausesLineWrappingProblems(\n                veryLongArgumentName, veryLongArgumentName, LongArgumentName);\n        }\n    }\n}\n</code></pre>"},{"location":"DeveloperGuide/CodingStandards/#c-coding-guidelines","title":"C# coding guidelines","text":""},{"location":"DeveloperGuide/CodingStandards/#comments","title":"Comments","text":"<ul> <li>Create an XML comment for the public attribute. (It is automatically created by typing <code>///</code> in Visual studio or VSCode).</li> <li>Writing XML comments in the inner class.</li> <li>Beginning with a capital letter and ending with a period. <code>// This is sample comment.</code> <pre><code>/// &lt;summary&gt;\n/// XML comments.\n/// &lt;/summary&gt;\npublic class SampleClass\n{\n    /// &lt;summary&gt;\n    /// XML comments.\n    /// &lt;/summary&gt;\n    class InnerClass\n    {\n\n        /// &lt;summary&gt;\n        /// XML comments.\n        /// &lt;/summary&gt;\n        public void SampleMethod()\n        {\n\n        }\n    }\n\n}\n</code></pre></li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#constants","title":"Constants","text":"<ul> <li>Variables and fields that can be made <code>const</code> should always be made <code>const</code>.</li> <li>If <code>const</code> isn\u2019t possible, <code>readonly</code> can be a suitable alternative.</li> <li>Prefer named constants to magic numbers.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#property-styles","title":"Property styles","text":"<ul> <li>For single line read-only properties, prefer expression body properties     (<code>=&gt;</code>) when possible.</li> <li>Also use (<code>=&gt;</code>) to simply be a getter or setter of a local field. <code>{ get =&gt; variables; set =&gt; variables = value; }</code></li> <li>For everything else, use the older <code>{ get; set; }</code> syntax.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#structs-and-classes","title":"Structs and classes:","text":"<ul> <li>Structs are very different from classes:<ul> <li>Structs are always passed and returned by value.</li> <li>Assigning a value to a member of a returned struct doesn\u2019t modify the     original - e.g. <code>transform.position.x = 10</code> doesn\u2019t set the transform\u2019s     position.x to 10; <code>position</code> here is a property that returns a <code>Vector3</code>     by value, so this just sets the x parameter of a copy of the original.</li> </ul> </li> <li>Consider struct when the type can be treated like other value types - for   example, if instances of the type are small and commonly short-lived or are   commonly embedded in other objects. Good examples include Vector3,   Quaternion and Bounds.</li> <li>Be careful about \u201cnew\u201d classes and structures.<ul> <li>For example, Unity's MonoBehaviour's Update() and FixedUpdate() can negatively    impact performance if a new class or structure is created for each frame.</li> <li>Be especially careful with the new class.</li> </ul> </li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#field-initializers","title":"Field initializers","text":"<ul> <li>Field initializers are generally encouraged.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#extension-methods","title":"Extension methods","text":"<ul> <li>Only use an extension method when the source of the original class is not   available, or else when changing the source is not feasible.</li> <li>Only use an extension method if the functionality being added is a \u2018core\u2019   general feature that would be appropriate to add to the source of the   original class.</li> <li>Note - if we have the source to the class being extended, and the   maintainer of the original class does not want to add the function,   prefer not using an extension method.</li> <li>Only put extension methods into core libraries that are available   everywhere - extensions that are only available in some code will become a   readability issue.</li> <li>Be aware that using extension methods always obfuscates the code, so err on   the side of not adding them.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#ref-and-out","title":"ref and out","text":"<ul> <li>Use <code>out</code> for returns that are not also inputs.</li> <li>Place <code>out</code> parameters after all other parameters in the method definition.</li> <li><code>ref</code> should be used rarely, when mutating an input is necessary.</li> <li>Consider using <code>var</code> and <code>out</code> together.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#linq","title":"LINQ","text":"<ul> <li>In general, prefer single line LINQ calls and imperative code, rather than   long chains of LINQ. Mixing imperative code and heavily chained LINQ is   often hard to read.</li> <li>Prefer member extension methods over SQL-style LINQ keywords - e.g. prefer   <code>myList.Where(x)</code> to <code>myList where x</code>.</li> <li>Avoid <code>Container.ForEach(...)</code> for anything longer than a single statement.</li> <li>Avoid using it in Unity's MonoBehaviour <code>Update()</code> and <code>FixedUpdate()</code>; use it only in one-off calls such as <code>Awake()</code> and <code>Start()</code>.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#array-vs-list","title":"Array vs List","text":"<ul> <li>Array and List, the use of array is preferred.</li> <li>Generally, arrays perform better than <code>List&lt;&gt;</code>.</li> <li>After selecting from <code>List&lt;&gt;</code> using Linq, it can be converted to an array using <code>ToArray()</code>.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#namespace","title":"Namespace","text":"<p>TODO</p>"},{"location":"DeveloperGuide/CodingStandards/#string","title":"String","text":"<ul> <li>String uses an empty string instead of null. <code>var someString = String.Empty;</code></li> <li>String interpolation vs <code>String.Format()</code> vs <code>String.Concat</code> vs <code>operator+</code><ul> <li>In general, use whatever is easiest to read, particularly for logging and   assert messages.</li> <li>Be aware that chained <code>operator+</code> concatenations will be slower and cause   significant memory churn.</li> <li>If performance is a concern, <code>StringBuilder</code> will be faster for multiple string concatenations.</li> </ul> </li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#constructor-vs-object-initializer-syntax","title":"Constructor vs Object Initializer syntax","text":"<pre><code>// Object initializer syntax\nvar x = new SomeClass \n{\n    Property1 = value1,\n    Property2 = value2,\n};\n\n// Constructor\nvar x = new SomeClass(value1, value2)\n</code></pre> <ul> <li>Avoid using object initializer syntax for classes or structs with constructors.</li> <li>If splitting across multiple lines, indent one block level.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#calling-delegates","title":"Calling delegates","text":"<ul> <li>When calling a delegate, use <code>Invoke()</code> and use the null conditional   operator - e.g. <code>SomeDelegate?.Invoke()</code>. This clearly marks the call at the   callsite as \u2018a delegate that is being called\u2019. The null check is concise and   robust against threading race conditions.</li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#the-var-keyword","title":"The <code>var</code> keyword","text":"<ul> <li>Use of <code>var</code> is encouraged if it aids readability by avoiding type names   that are noisy, obvious, or unimportant.</li> <li>Encouraged:<ul> <li>When the type is obvious - e.g. <code>var apple = new Apple();</code>, or <code>var   request = Factory.Create&lt;HttpRequest&gt;();</code></li> <li>For transient variables that are only passed directly to other methods -   e.g. <code>var item = GetItem(); ProcessItem(item);</code></li> </ul> </li> <li>Discouraged:<ul> <li>When working with basic types - e.g. <code>var success = true;</code></li> <li>When working with compiler-resolved built-in numeric types - e.g. <code>var   number = 12 * ReturnsFloat();</code></li> <li>When users would clearly benefit from knowing the type - e.g. <code>var   listOfItems = GetList();</code></li> </ul> </li> </ul>"},{"location":"DeveloperGuide/CodingStandards/#region","title":"Region","text":""},{"location":"DeveloperGuide/CodingStandards/#todo-unity-coding-guidelines","title":"(TODO) Unity coding guidelines","text":""},{"location":"DeveloperGuide/CodingStandards/#unity-callbacks","title":"Unity callbacks","text":""},{"location":"DeveloperGuide/CodingStandards/#refer-to-the-interface-in-inspector","title":"Refer to the interface in Inspector","text":""},{"location":"DeveloperGuide/CodingStandards/#serializefield","title":"SerializeField","text":""},{"location":"DeveloperGuide/CodingStandards/#destroy","title":"Destroy","text":""},{"location":"DeveloperGuide/CodingStandards/#editor-extension","title":"Editor extension","text":""},{"location":"DeveloperGuide/CodingStandards/#symbols","title":"Symbols","text":""},{"location":"DeveloperGuide/CodingStandards/#dependency-injection","title":"Dependency injection","text":""},{"location":"DeveloperGuide/CodingStandards/#tag-layer","title":"Tag &amp; Layer","text":""},{"location":"DeveloperGuide/CodingStandards/#open-two-inspector","title":"Open two inspector","text":""},{"location":"DeveloperGuide/CodingStandards/#initialize","title":"Initialize","text":""},{"location":"DeveloperGuide/CodingStandards/#update-fixedupdate","title":"Update &amp; FixedUpdate","text":""},{"location":"DeveloperGuide/CodingStandards/#change-variable-name","title":"Change variable name","text":""},{"location":"DeveloperGuide/Customization/","title":"Customization","text":""},{"location":"DeveloperGuide/DemoScenes/","title":"Demo scenes","text":"<p>AWSIM includes the following demo scenes.</p> Scene Feature <code>AutowareSimulationDemo.unity</code> This is the main demo simulation scene connecting AWSIM and Autoware for self-driving. <code>IntegrateScenarioSimulatorDemo.unity</code> Demo simulation connecting AWSIM and Scenario simulator v2 to run the sample Open SCENARIO. <code>PcdGenerationDemo.unity</code> Demo simulation outputting pcd from 3D model of AWSIM map"},{"location":"DeveloperGuide/Directory/","title":"Directory","text":"<p>AWSIM has the following directory structure.</p> <p>Info</p> <p>AWSIM has the following directory structure. Mostly they are grouped by file type. However, scene-specific assets are specifically included in the scene directory (<code>Assets/Awsim/Scenes/&lt;Scene dir&gt;</code>) . These assets are not intended for use in other scenes.</p> <pre><code>Awsim       //  root directory.\n \u2502\n \u2502\n \u251c\u2500Assets                           // Unity project Assets directory.\n \u2502  \u2502                               // Place external libraries\n \u2502  \u2502                               // under this directory.\n \u2502  \u2502                               // (e.g. RGLUnityPlugin, ROS2ForUnity, etc..)\n \u2502  \u2502\n \u2502  \u2502\n \u2502  \u251c\u2500Awsim                         // Includes assets directly related to AWSIM\n \u2502  |  |                            // (Scripts, Prefabs etc.)\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u251c\u2500Externals                  // Place for large files or\n \u2502  \u2502  |                            // external project dependencies\n \u2502  \u2502  |                            // (e.g. Ninshinjuku map asset).\n \u2502  \u2502  \u2502                            // The directory is added to `.gitignore`\n \u2502  \u2502  \u2502 \n \u2502  \u2502  \u2502 \n \u2502  \u2502  \u251c\u2500Fonts                      // Fonts including text mesh pro sdf.\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u251c\u2500Graphics                   // Graphics including rendering pipeline.\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u251c\u2500Inputactions               // Input action assets.\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u251c\u2500Models                     // 3D models\n \u2502  \u2502  \u2502  \u2502                         // Textures and materials for 3D models\n \u2502  \u2502  \u2502  \u2502                         // are also included.\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u2514\u2500&lt;3D Model&gt;              // Directory of each 3D model.\n \u2502  \u2502  \u2502     \u2502\n \u2502  \u2502  \u2502     \u2502\n \u2502  \u2502  \u2502     \u251c\u2500Materials            // Materials used in 3D model.\n \u2502  \u2502  \u2502     \u2502\n \u2502  \u2502  \u2502     \u2502\n \u2502  \u2502  \u2502     \u2514\u2500Textures             // Textures used in 3D model.\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u251c\u2500Prefabs                    // Prefabs not dependent on a specific scene.\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u251c\u2500Scenes                     // Scenes\n \u2502  \u2502  \u2502  \u2502                         // Includes scene-specific scripts, etc.\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u2514\u2500&lt;Scene dir&gt;             // Directory dedicated to specific scenes.\n \u2502  \u2502  \u2502                            // Assets (script, prefab, etc.) that\n \u2502  \u2502  \u2502                            // can be used only in that scene are here.\n \u2502  \u2502  \u2502                            // Generic assets are not included here.\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u251c\u2500Scripts                    // C# scripts.\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u251c\u2500Common                  // Common layer scripts.\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u251c\u2500Editor                  // Editor scripts.\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u251c\u2500Entity                  // Entity layer scripts.\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u251c\u2500UI                      // UI layer scripts.\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502  \u2514\u2500Usecase                 // Usecase layer scripts.\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2514\u2500Textures                   // Textures.\n \u2502  \u2502\n \u2502  \u2502\n \u2502  \u251c\u2500RGLUnityPlugin        // Robotec GPU LiDAR external library.\n \u2502  \u2502                       // https://github.com/RobotecAI/RobotecGPULidar\n \u2502  \u2502\n \u2502  \u2502\n \u2502  \u251c\u2500Ros2ForUnity          // ROS2 communication external library.\n \u2502  \u2502                       // https://github.com/RobotecAI/ros2-for-unity\n \u2502  \u2502\n \u2502  \u2514\u2500TestMesh pro          // Text mesh pro library\n \u2502                          // https://docs.unity3d.com/Packages/com.unity.ugui@2.0/manual/TextMeshPro/index.html\n \u2502\n \u2502\n \u251c\u2500Packages         // Unity automatically generated directories.\n \u251c\u2500ProjectSettings  //\n \u251c\u2500UserSettings     //\n \u2502\n \u2502\n \u2514\u2500docs             // AWSIM documentation. Generated using mkdocs.\n                    // https://www.mkdocs.org/\n</code></pre>"},{"location":"DeveloperGuide/Documentation/","title":"Documentation","text":"<p>This document uses Material for MkDocs</p>"},{"location":"DeveloperGuide/Documentation/#local-hosting","title":"Local hosting","text":"<ol> <li>Install Material for <code>MkDocs</code>. <pre><code>pip install mkdocs-material\n</code></pre></li> <li>Change AWSIM directory <pre><code>cd AWSIM\n</code></pre></li> <li> <p>Hosting on localhost. <pre><code>mkdocs serve\n</code></pre></p> </li> <li> <p>Check serving on localhost. <pre><code>INFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  Documentation built in 0.16 seconds\nINFO     -  [03:13:22] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO     -  [03:13:22] Serving on http://127.0.0.1:8000/\n</code></pre></p> </li> <li> <p>Access <code>http://127.0.0.1:8000/</code> with a web browser. </p> </li> </ol> <p>For further reference see Material for MkDocs - Getting started.</p>"},{"location":"DeveloperGuide/Documentation/#mkdocs-files","title":"MkDocs files","text":"<p>Use the following <code>/docs</code> directory and <code>mkdocs.yml</code> for new documentation files. <pre><code>AWSIM\n\u251c\u2500 docs/                // markdown and image file for each document.\n\u2514\u2500 mkdocs.yml           // mkdocs config.\n</code></pre> Create one directory per document. For example, the directory structure of this \"Documentation\" page might look like this. <pre><code>AWSIM\n\u2514\u2500 docs/                            // Root of all documents.\n    \u2514\u2500 DeveloperGuide               // Category.\n        \u2514\u2500 Documentation            // Root of each document.\n            \u251c\u2500 index.md             // Markdown file.\n            \u2514\u2500 image_0.png          // Images used in markdown file.\n</code></pre></p>"},{"location":"DeveloperGuide/Documentation/#deploy-hosting","title":"Deploy &amp; Hosting","text":"<p>When docs are pushed to the main branch, they are deployed to GitHub Pages using GitHub Actions. See also Material for MkDocs - Publishing your site</p>"},{"location":"DeveloperGuide/Experimental/RunningHeadless/","title":"Running headless","text":""},{"location":"DeveloperGuide/Experimental/RunningHeadless/#headless","title":"Headless","text":"<p>By default, AWSIM is a standard windowed application. This is core functionality and essential for running the simulation manually on a local PC with an attached display, but it starts to be problematic for CI and testing on the cloud instances.</p> <p>Unity provides a few options for running binaries headless, but all of them have two things in common: </p> <ul> <li>they still require a window server (X11 on Linux), or</li> <li>they disable the support for GPU devices.</li> </ul> <p>Since AWSIM requires GPU for sensor simulation, it is required to use 3rd party utilities. The best utility for that is Xvfb.</p> <p>Headless with Xvfb is only supported on Ubuntu</p>"},{"location":"DeveloperGuide/Experimental/RunningHeadless/#xvfb","title":"Xvfb","text":"<p>Xvfb, which stands for \"X Virtual Framebuffer\", is a display server implementing the X11 display server protocol. It enables the running of graphical applications without the need for a physical display by creating a virtual frame buffer in memory. </p> <p>This tool is transparent for the AWSIM and the pipeline in which it is working and can be conveniently used to mimic the headless functionalities.</p>"},{"location":"DeveloperGuide/Experimental/RunningHeadless/#installing","title":"Installing","text":"<p>Xvfb is a standard Ubuntu package and can be installed with <code>apt</code>:</p> <pre><code>sudo apt update\nsudo apt install xvfb \n</code></pre>"},{"location":"DeveloperGuide/Experimental/RunningHeadless/#running-the-awsim-with-xvfb","title":"Running the AWSIM with Xvfb","text":"<p>To run the AWSIM binary, all that is needed to do, is to prefix the command with <code>xvfb-run</code>:</p> <pre><code>xvfb-run ./AWSIM.x86_64\n</code></pre> <p>Please note that <code>xvfb-run</code> comes with multiple options, like choosing the virtual screen size or color palette. Please see the manual for all the options.</p>"},{"location":"DeveloperGuide/ExternalLibraries/","title":"External libraries","text":"<p>List of external libraries used in AWSIM.</p> Library Feature GitHub ros2-for-unity ROS2 communication. https://github.com/RobotecAI/ros2-for-unity Robotec-GPU-LiDAR LiDAR simulation. https://github.com/RobotecAI/RobotecGPULidar YamlDotNet Serialization of yaml. https://github.com/aaubry/YamlDotNet ZeroMQ ZeroMQ communication. (Integration with Scenario Simulator.) https://zeromq.org/ GeographicLib.NET Geograpic coordinate transformations. https://github.com/noelex/GeographicLib.NET"},{"location":"DeveloperGuide/ForkRepository/","title":"Fork repository","text":"<p>The following are the recommended operational practices when AWSIM is forked or copied for custom use.</p> <p>Info</p> <p>The architecture can be freely designed. However, if you are in doubt, this document may be helpful.</p>"},{"location":"DeveloperGuide/ForkRepository/#recommended-rules","title":"Recommended rules","text":"<ul> <li>Avoid making changes to existing AWSIM assets in order to merge updates from the original AWSIM into your custom AWSIM.</li> <li>If you want to make changes to the original AWSIM, please refer to the How to contribute documentation.</li> <li>Decide whether to use the HDRP or URP rendering pipeline. see also Switch SRP documentation.</li> <li>Create a directory for the newly added assets and include the additional assets there. For example, this directory structure.     <pre><code>Awsim       //  root directory.\n \u2502\n \u2502\n \u251c\u2500Assets                     \n \u2502  \u2502                         \n \u2502  \u2502\n \u2502  \u251c\u2500Awsim                // Default AWSIM assets.\n \u2502  \u2502  \u2502                   // Assets contained in this directory \n \u2502  \u2502  \u2502                   // avoid change.\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u251c\u2500Prefabs\n \u2502  \u2502  \u251c\u2500Models\n \u2502  \u2502  \u251c\u2500etc.\n \u2502  \u2502  \u250a\ufe0e      \n \u2502  \u2502                        \n \u2502  \u251c\u2500&lt;Custom dir&gt;         // Additional AWSIM assets.\n \u2502  \u2502  \u2502                   // Include additional assets in \n \u2502  \u2502  \u2502                   // any custom directory you create.\n \u2502  \u2502  \u2502\n \u2502  \u2502  \u2502               \n \u2502  \u2502  \u251c\u2500Prefabs\n \u2502  \u2502  \u251c\u2500Models\n \u2502  \u2502  \u251c\u2500etc.\n \u2502  \u2502  \u250a\ufe0e\n \u2502  \u2502\n \u2502  \u2502 \n \u250a\ufe0e  \u250a\ufe0e  \n</code></pre></li> </ul>"},{"location":"DeveloperGuide/ForkRepository/#namespace","title":"Namespace","text":"<p>It is a good idea to include it in AWSIM's existing namespace as appropriate. Please refer to the Architecture documentation.</p>"},{"location":"DeveloperGuide/Git/","title":"Git","text":"<p>AWSIM is managed by git and GitHub.</p>"},{"location":"DeveloperGuide/Git/#policy","title":"Policy","text":"<ul> <li>All git commit history is not modified</li> <li>Disallow <code>git rebase</code></li> <li>Disallow <code>git push --force</code></li> <li>Fast forward recommended</li> <li>Include <code>.meta</code> files</li> </ul>"},{"location":"DeveloperGuide/Git/#branch","title":"Branch","text":"<pre><code>---\nconfig:\n  logLevel: 'debug'\n  theme: 'default'\n  themeVariables:\n      'git0': '#000000'\n      'git1': '#000000'\n      'git2': '#000000'\n      'git3': '#000000'\n      'gitBranchLabel0': '#ffffff'\n      'gitBranchLabel1': '#ffffff'\n      'gitBranchLabel2': '#ffffff'\n      'gitBranchLabel3': '#ffffff'\n---\n  gitGraph\n    checkout main\n    commit\n    branch feature/xxx\n    commit\n    checkout main\n    merge feature/xxx\n    checkout main\n    branch release/xxx\n    checkout release/xxx\n    commit\n    checkout main\n    merge release/xxx\n    checkout main\n    commit\n</code></pre> Branch Explain main Mainstream branch. Latest each AWSIM features and Lexus demo binary scene are included. feature/* Feature development branch created from the <code>main</code> branch. release/* Release branch of AWSIM. New AWSIM Lexus demo binary is created for each release. gh-pages Documantation hosted on GitHub pages (This web site).  When committed to the main branch, the documentation will be deployed by GitHub-Actions."},{"location":"DeveloperGuide/HowToContribute/","title":"How to contribute","text":"<p>Everyone is welcome to contribute to AWSIM. We want to develop efficiently, so please follow the steps below.</p> <ol> <li>Create issue. and mention <code>@mackierx111</code>.</li> <li>Once the implementation policy has been decided, create a working branch from the <code>main</code> branch</li> <li>Create pull request.</li> <li>Be sure to self-check before requesting a review. The checklist items are as follows.<ul> <li>Check that there are no unnecessary comments or <code>Debug.Log()</code> statements remaining.</li> <li>Run UnityEditor to check if the implemented functions work properly.</li> <li>Check that the implemented functions do not affect existing scenes, etc. In particular, check that the <code>AutowareSimulationDemo.unity</code> scene is working properly.</li> <li>Merge the latest version of the <code>main</code> branch into the work branch.</li> <li>Understand AWSIM License and agree that it applies to your contribution.</li> </ul> </li> <li>Create a pull request and submit it to <code>@mackierx111</code> for review.</li> </ol>"},{"location":"DeveloperGuide/HowToContribute/#license-applicability-during-contributions","title":"License applicability during contributions","text":"<p>AWSIM License applies to all contributions to <code>AWSIM</code>. Before contributing, please read LICENSE and understand that it applies to your contribution.</p>"},{"location":"DeveloperGuide/KeymapList/","title":"Index","text":""},{"location":"DeveloperGuide/KeymapList/#keyboard","title":"Keyboard","text":""},{"location":"DeveloperGuide/KeymapList/#logitech-g29-steering-wheel","title":"Logitech G29 steering wheel","text":"key Steering wheel Throttle pedal Brake pedal Triangle Circle Square Cross R2 R3 L2"},{"location":"DeveloperGuide/Layer/Common/Ros2/","title":"Ros2","text":""},{"location":"DeveloperGuide/Layer/Common/Ros2/#ros2-for-unity","title":"ROS2 for unity","text":"<p>Ros2ForUnity (<code>R2FU</code>) module is a communication solution that effectively connects Unity and the ROS2 ecosystem, maintaining a strong integration. Unlike other solutions, it doesn't rely on bridging communication but rather utilizes the ROS2 middleware stack (specifically the <code>rcl</code> layer and below), enabling the inclusion of ROS2 nodes within Unity simulations.</p> <p><code>R2FU</code> is used in AWSIM for many reasons. First of all, because it offers high-performance integration between Unity and ROS2, with improved throughput and lower latencies compared to bridging solutions. It provides real ROS2 functionality for simulation entities in Unity, supports standard and custom messages, and includes convenient abstractions and tools, all wrapped as a Unity asset. For a detailed description, please see README.</p> <p>Warning</p> <p>To avoid internal conflicts between the standalone libraries, and sourced ones, ROS2 instance shouldn't be sourced before running AWSIM or the Unity Editor.</p> <p>Can't see topics</p> <p>There are no errors but I can't see topics published by <code>R2FU</code></p> <ul> <li>Make sure your DDS (Localhost settings) config is correct.</li> <li>Sometimes ROS2 daemon brakes up when changing network interfaces or ROS2 version.</li> </ul> <p>Try to stop it forcefully (<code>pkill -9 ros2_daemon</code>) and restart (<code>ros2 daemon start</code>).</p>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#awsim-ros2-node","title":"Awsim ROS2 node","text":"<p>AwsimRos2Node static class is a ROS2 node that can be commonly used in AWSIM. The design of AwsimRos2Node provides the following advantages.</p> <ul> <li>Time sources used in ROS2 can be centrally managed, modified, and reflected.</li> <li>A single node can be used to aggregate topics to be Pub/Subbed in AWSIM.</li> <li>Ability to add and delete pub/subs on topics and services and retrieve times.</li> </ul> <p>ROS2 node name and time source can be specified at initialization. <pre><code>AwsimRos2Node.Initialize(\"AWSIM\", TimeSourceType.Ros2);\n</code></pre></p>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#clock","title":"Clock","text":"<p>ClockRos2Publisher allows the publication of the simulation time from the clock operating within AWSIM. The current time is retrived from a <code>TimeSource</code> object via the <code>AwsimRos2Node</code>. The AWSIM provides convenient method for selecting the appropriate time source type as well as the flexibility to implement custom <code>TimeSources</code> tailored to specific user requirements.</p>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#timesource","title":"Timesource","text":"<p>List of Time Sources</p> Type TimeSouceType enum value Driven by Start Value Affected by Time Scale Remarks Unity 0 UnityEngine.Time 0 yes External 1 externally depends on external source no used by the scenario simulator v2 DotnetSystem 2 System.DateTime UNIX epoch yes starts with UNIX epoch time and progresses with System.DateTime scaled by AWSIM time scale DotnetSimulation 3 System.DateTime 0 yes starts with zero value and progresses with System.DateTime scaled by AWSIM time scale Ros2 4 ROS2.Clock UNIX epoch (by default) no uses ROS 2 time <p></p>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#default-message-types","title":"Default message types","text":"<p>The basic ROS2 msgs types that are supported in AWSIM by default include:</p> <ul> <li>common_interfaces:<ul> <li><code>std_msgs</code>.</li> <li><code>geometry_msgs</code>,</li> <li><code>sensor_msgs</code>,</li> <li><code>nav_msgs</code>,</li> <li><code>diagnostic_msgs</code>,</li> </ul> </li> <li>rcl_interfaces:<ul> <li><code>builtin_interfaces</code>,</li> <li><code>action_msgs</code>,</li> <li><code>rosgraph_msgs</code>,</li> <li><code>test_msgs</code>.</li> </ul> </li> <li>autoware_msgs:<ul> <li><code>autoware_common_msgs</code>,</li> <li><code>autoware_control_msgs</code>,</li> <li><code>autoware_localization_msgs</code>,</li> <li><code>autoware_map_msgs</code>,</li> <li><code>autoware_perception_msgs</code>,</li> <li><code>autoware_planning_msgs</code>,</li> <li><code>autoware_sensing_msgs</code>,</li> <li><code>autoware_system_msgs</code>,</li> <li><code>autoware_vehicle_msgs</code>.</li> </ul> </li> <li>tier4_autoware_msgs:<ul> <li><code>tier4_control_msgs</code>,</li> <li><code>tier4_vehicle_msgs</code>.</li> </ul> </li> <li>Others:<ul> <li><code>tf2_msgs</code>,</li> <li><code>unique_identifier_msgs</code>.</li> </ul> </li> </ul> <p>In order for the message package to be used in Unity, its <code>*.dll</code> and <code>*.so</code> libraries must be generated using <code>R2FU</code>.</p>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#addcustomros2message","title":"AddCustomRos2Message","text":"<p>If you want to use custom message in AWSIM, you need to generate the appropriate files, to do this you have to build <code>ROS2ForUnity</code> yourself - please follow the steps below. Remember to start with prerequisities though.</p> <p>custom_msgs</p> <p>In order to simplify this tutorial, the name of the package containing the custom message is assumed to be <code>custom_msgs</code> - remember to replace it with the name of your package.</p>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#prerequisites","title":"Prerequisites","text":"<p><code>ROS2ForUnity</code> depends on a ros2cs - a C# .NET library for ROS2. This library is already included so you don't need to install it, but there are a few prerequisites that must be resolved first.</p> <p>Please select your system and resolve all prerequisites:</p> Ubuntu <ul> <li><code>ros2cs</code> prerequisites for Ubuntu</li> <li>ROS2 version is <code>humble</code> and is located in <code>/opt/ros/humble</code></li> <li>Your package with custom message is located in the home directory <code>~/custom_msgs</code> or is hosted on git repository.</li> <li>Shell - commands have to be executed from the <code>bash</code> shell </li> </ul> <pre><code>- *ROS2* version is `humble` and is located in  `C:\\ros2_humble`\n- Your package with custom message package is located in the home directory `C:\\custom_msgs` or is hosted on *git* repository.\n- *Shell* - commands should be executed from the `powershell` shell\n</code></pre>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#1-workspace-preparation","title":"1. Workspace preparation","text":"<ol> <li> <p>Clone <code>ROS2ForUnity</code> repository by execute command:</p> Ubuntu <pre><code>git clone https://github.com/RobotecAI/ros2-for-unity ~/\n</code></pre> <p>Warning</p> <p>The cloned <code>ROS 2 For Unity</code> repository must be located in the home directory <code>~/</code>.</p> </li> <li> <p>Pull dependent repositories by execute commands:</p> Ubuntu <pre><code>cd ~/ros2-for-unity &amp;&amp;\n./opt/ros/humble/setup.bash &amp;&amp;\n./pull_repositories.sh\n</code></pre> </li> </ol>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#2-setup-custom_msgs-package","title":"2. Setup <code>custom_msgs</code> package","text":"<p>The method to add a custom package to build depends on where it is located. The package can be on your local machine or just be hosted on a git repository. Please, choose the appropriate option and follow the instructions.</p>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#21-package-contained-on-local-machine","title":"2.1. Package contained on local machine","text":"<ol> <li> <p>Copy the <code>custom_msgs</code> package with custom message to the folder to <code>src/ros2cs/custom_messages</code> directory</p> Ubuntu <pre><code>cp -r ~/custom_msgs ~/ros2-for-unity/src/ros2cs/custom_messages/\n</code></pre> </li> </ol>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#22-package-hosted-on-git-repository","title":"2.2. Package hosted on git repository","text":"<ol> <li>Open <code>ros2-for-unity/ros2_for_unity_custom_messages.repos</code> file in editor.</li> <li> <p>Modify the contents of the file shown below, uncomment and set:</p> <ul> <li><code>&lt;package_name&gt;</code> - to your package name - so in this case <code>custom_msgs</code>,</li> <li><code>&lt;repo_url&gt;</code> - to repository address,  </li> <li><code>&lt;repo_branch&gt;</code> - to desired branch. <pre><code>repositories:\n#  src/ros2cs/custom_messages/&lt;package_name&gt;:\n#    type: git\n#    url: &lt;repo_url&gt;\n#    version: &lt;repo_branch&gt;\n</code></pre></li> </ul> <p>Example</p> <p>Below is an example of a file configured to pull 2 packages (<code>custom_msgs</code>,<code>autoware_msgs</code>) of messages hosted on a git repository. <pre><code># NOTE: Use this file if you want to build with custom messages that reside in a separate remote repo.\n# NOTE: use the following format\n\nrepositories:\n    src/ros2cs/custom_messages/custom_msgs:\n        type: git\n        url: https://github.com/tier4/custom_msgs.git\n        version: main\n    src/ros2cs/custom_messages/autoware_msgs:\n        type: git\n        url: https://github.com/autowarefoundation/autoware/\n        version: main\n</code></pre></p> </li> <li> <p>Now pull the repositories again (also the <code>custom_msgs</code> package repository)</p> Ubuntu <pre><code>cd ~/ros2-for-unity\n./pull_repositories.sh\n</code></pre> </li> </ol>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#3-build-ros-2-for-unity","title":"3. Build ROS 2 For Unity","text":"<p>Build <code>ROS2ForUnity</code> with custom message packages using the following commands:</p> Ubuntu <pre><code>cd ~/ros2-for-unity\n./build.sh --standalone\n</code></pre>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#4-install-custom_msgs-to-awsim","title":"4. Install <code>custom_msgs</code> to AWSIM","text":"<p>New <code>ROS2ForUnity</code> build, which you just made in step 3, contains multiple libraries that already exist in the AWSIM. To install <code>custom_msgs</code> and not copy all other unnecessary files, you should get the <code>custom_msgs</code> related libraries only.</p> <p>You can find them in following directories and simply copy to the analogous directories in <code>AWSIM/Assets/Ros2ForUnity</code> folder, or use the script described here.</p> Ubuntu <ul> <li><code>ros2-for-unity/install/asset/Ros2ForUnity/Plugins</code> which names matches <code>custom_msgs_*</code></li> <li><code>ros2-for-unity/install/asset/Ros2ForUnity/Plugins/Linux/x86_64/</code> which names matches <code>libcustom_msgs_*</code></li> </ul>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#automation-of-copying-message-files","title":"Automation of copying message files","text":"Ubuntu <p>To automate the process, you can use a script that copies all files related to your <code>custom_msgs</code> package.</p> <ol> <li>Create a file named <code>copy_custom_msgs.sh</code> in directory <code>~/ros2-for-unity/</code> and paste the following content into it. <pre><code>#!/bin/bash\necho \"CUSTOM_MSGS_PACKAGE_NAME: $1\"\necho \"AWSIM_DIR_PATH: $2\"\nfind ./install/asset/Ros2ForUnity/Plugins -maxdepth 1 -name \"$1*\"    -type f -exec cp {} $2/Assets/Ros2ForUnity/Plugins \\;\nfind ./install/asset/Ros2ForUnity/Plugins/Linux/x86_64 -maxdepth 1 -name     \"lib$1*\" -type f -exec cp {} $2/Assets/Ros2ForUnity/Plugins/Linux/x86_64 \\;\n</code></pre></li> <li>Save the file and give it executable rights with the command: <pre><code>chmod a+x copy_msgs.sh\n</code></pre></li> <li> <p>Run the script with two arguments: <pre><code>./copy_custom_msgs.sh &lt;CUSTOM_MSGS_PACKAGE_NAME&gt; &lt;AWSIM_DIR_PATH&gt;\n</code></pre></p> </li> <li> <p><code>&lt;CUSTOM_MSGS_PACKAGE_NAME&gt;</code> - the first one which is the name of the package with messages - in this case <code>custom_msgs</code>,</p> </li> <li><code>&lt;AWSIM_DIR_PATH&gt;</code> - the second which is the path to the cloned AWSIM repository.</li> </ol> <p>Example</p> <pre><code>./copy_custom_msgs.sh custom_msgs ~/unity/AWSIM/\n</code></pre>"},{"location":"DeveloperGuide/Layer/Common/Ros2/#5-test","title":"5. Test","text":"<p>Make sure that the package files <code>custom_msgs</code> have been properly copied to the <code>AWSIM/Assets/Ros2ForUnity</code>. Then try to create a message object and check in the console of <code>Unity Editor</code> if it compiles without errors.</p> <p>Taking <code>Header</code> as an example, the simplest way to create an object is: <pre><code>var topic = new std_msgs.msg.Header();\ntopic.Frame_id = \"map\";\ntopic.Stamp.Sec = 1234567;\n</code></pre></p> <p><code>ROS2</code> messages in Unity are just a structure containing the same fields - keep the same names and types. It is same as <code>C#</code> structure to access its fields for reading and filling.</p> <p>Warning</p> <p>The first letter of each message field in <code>Unity</code> is always uppercase - even if it is described with lowercase in <code>ROS2</code> message.</p>"},{"location":"DeveloperGuide/Layer/Entity/Infra/TrafficLight/","title":"Traffic light","text":"<p>AWSIM supports traffic light control in accordance with the Vienna Convention. The TrafficLight class allows for both vehicular and pedestrian traffic lights.</p> <ul> <li> <p>Vehicle traffic light</p> <p></p> </li> <li> <p>Pedestiran traffic light</p> <p></p> </li> </ul>"},{"location":"DeveloperGuide/Layer/Entity/Infra/TrafficLight/#bulb","title":"Bulb","text":"<p>Traffic Light (script) is a component added to every <code>TrafficLight</code> on the scene. It is responsible for configuring the <code>TrafficLight</code> behavior - the bulbs and their colors.</p> <p>The <code>Renderer</code> filed points to the renderer that should be configured - in this case it is always a <code>TrafficLight</code> renderer.</p> <p><code>Bulbs Emission Config</code> is a list describing available colors for this Traffic Light. Every element of this list configures the following</p> <ul> <li><code>Bulb Color</code> - the name of the configured color that will be used to reference this color</li> <li><code>Color</code> - the actual color with which a bulb should light up</li> <li><code>Intensity</code> - the intensity of the color</li> <li><code>Exposure Weight</code> - how bright should the color be when lighting up</li> </ul> <p>The <code>Bulb Material Config</code> is a list of available bulbs in a given Traffic Light. Every element describes a different bulb. Every bulb has the following aspects configured</p> <ul> <li><code>Bulb Type</code> - the name that will be usd to reference the configured bulb</li> <li><code>Material Index</code> - The index of a material of the configured bulb.     This is an index of a sub-mesh of the configured bulb in the Traffic Light mesh.</li> </ul>"},{"location":"DeveloperGuide/Layer/Entity/Infra/TrafficLight/#material","title":"Material","text":"<p>An important element set in the TrafficLights object is the material of the mesh renderer component. The material at index 0 always applies to the housing of the light. Subsequent elements correspond to successive slots of the light source (round luminous object). They start at the upper left corner of the object, go to the right, down, and back to the left corner. These indices are used in the script \u201cTraffic Light\u201d (script).</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/","title":"Camera sensor","text":"<p><code>CameraSensor</code> is a component that simulates an RGB camera. Autonomous vehicles can be equipped with many cameras used for various purposes. In the current version of AWSIM, the camera is used primarily to provide the image to the traffic light recognition module in Autoware.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#prefab","title":"Prefab","text":"<p><pre><code>Assets/Awsim/Entity/Sensor/Camera/CameraSensor.prefab\n</code></pre> <pre><code>Assets/Awsim/Entity/Sensor/Camera/CameraSensorScheduler.prefab\n</code></pre></p> <p></p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#camerasensorscheduler-class","title":"CameraSensorScheduler class","text":"<p>The <code>CameraSensorScheduler</code> class schedules the rendering of <code>CameraSensor</code>. Normally, camera rendering is a highly demanding process. Therefore, the use of multiple camera sensors is performed by the CameraSensorScheduler by staggering the rendering timings one frame at a time.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#setting-parameters","title":"Setting parameters","text":"Type Parameter Feature <code>ICameraSensor</code> <code>_schedulableCameraSensorComponents</code> <code>CameraSensor</code> instances. <code>int</code> <code>_outputHz</code> Period to output."},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#camerasensor-class","title":"CameraSensor class","text":"<p>The <code>CameraSensor</code> class outputs a rendered image with OpenCV parameters applied; it is used by Autoware to recognize traffic lights, for example.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#how-to-use","title":"How to use","text":"<ol> <li>Place <code>CameraSensorScheduler.prefab</code> in the scene. (It will usually be placed under the game object of the vehicle.)</li> <li>Place <code>CameraSensor.prefab</code> in the lower level of <code>CameraSensorScheduler.prefab</code>. Then reference it in the <code>CameraSensorScheduler</code> inspector.</li> <li>After the scene is executed, <code>CameraSensorScheduler</code> is initialized by one of the classes.</li> <li>The <code>CameraSensorScheduler</code> coroutine then continues scheduling <code>CameraSensor</code> rendering and output.</li> </ol>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#setting-parameters_1","title":"Setting parameters","text":"Type Parameter Feature <code>int</code> <code>_width</code> Image width (px). <code>int</code> <code>_height</code> Image height (px). <code>float</code> <code>_k1</code> Distortion coefficient. For plumb_bob models's k1 parameter. <code>float</code> <code>_k2</code> Distortion coefficient. For plumb_bob models's k2 parameter. <code>float</code> <code>_p1</code> Distortion coefficient. For plumb_bob models's p1 parameter. <code>float</code> <code>_p2</code> Distortion coefficient. For plumb_bob models's p2 parameter. <code>float</code> <code>_p3</code> Distortion coefficient. For plumb_bob models's k3 parameter. <code>Camera</code> <code>_camera</code> Unity's camera component. <code>bool</code> <code>_enableLensDistortionCorrection</code> Flag whether to apply OpenCV distortion. <code>float</code> <code>_sharpeningStrength</code> Sharpness."},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#output-data","title":"Output data","text":"<p>It is contained in the CameraSensor.IReadOnlyOutputData type.</p> Type Parameter Feature <code>IReadOnlyCameraParameters</code> <code>CameraParameters</code> <code>RenderTexture</code> <code>OutputRenderTexture</code>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#add-output-callback","title":"Add output callback","text":"<p><code>CameraSensor</code> can add an <code>Action</code> type callback that takes <code>CameraSensor.IReadOnlyOutputData</code> as an argument.</p> <pre><code>// sample code from CameraRos2Publisher.cs\n_cameraSensor.OnOutput += Publish;\n</code></pre> <p></p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#cameraros2publisher-class","title":"CameraRos2Publisher class","text":"<p><code>CameraRos2Publisher</code> converts the output of <code>CameraSensor</code> to ROS2 and publishes the topic. Publish two msgs: camera info and image.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#setting-parameters_2","title":"Setting parameters","text":"Type Parameter Feature <code>string</code> <code>_imageTopic</code> <code>sensor_msgs/Image</code> msg topic name. <code>string</code> <code>_cameraInfoTopic</code> <code>sensor_msgs/CameraInfo</code> msg topic name. <code>string</code> <code>_frameId</code> Frame ID of ros2. <code>QosSettings</code> <code>_qosSettings</code> Quality of Service settings of ros2. <code>CameraSensor</code> <code>_cameraSensor</code> Target <code>CameraSensor</code> instance."},{"location":"DeveloperGuide/Layer/Entity/Sensor/CameraSensor/#default-publish-topics","title":"Default publish topics","text":"<p><code>CameraRos2Publisher</code> is configured by default with the following two topics publish. </p> Topic Message type <code>frame_id</code> <code>Hz</code> <code>QoS</code> <code>/sensing/camera/traffic_light/camera_info</code> <code>sensor_msgs/CameraInfo</code> <code>traffic_light_left_camera/camera_link</code> <code>10</code> <ul><li><code>Best effort</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/sensing/camera/traffic_light/image_raw</code> <code>sensor_msgs/Image</code> <code>traffic_light_left_camera/camera_link</code> <code>10</code> <ul><li><code>Best effort</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/","title":"GNSS sensor","text":"<p><code>GnssSensor</code> is a component which simulates the position of vehicle computed by the Global Navigation Satellite System based on the transformation of the GameObject to which this component is attached. The <code>GnssSensor</code> outputs the position in the MGRS coordinate system and Geo coordinate system.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#prefab","title":"Prefab","text":"<pre><code>Assets/Awsim/Entity/EgoVehicle/Gnss/GnssSensor.prefab\n</code></pre>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#gnsssensor-class","title":"GnssSensor class","text":"<p><code>GnssSensor</code> outputs MGRS and GeoCoordinate coordinate positions based on the configured period.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#prerequisites","title":"prerequisites","text":"<p><code>MgrsPosition</code> and <code>GeoCoordinatePosition</code> need to be set up. From these classes, the output is converted to each coordinate system by considering the Unity world coordinate system origin and sensor position.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#how-to-use","title":"How to use","text":"<ol> <li>Setup <code>MgrsPosition</code> and <code>GeoCoordinatePosition</code> int the scene.</li> <li>Initialize <code>GnssSensor</code>.</li> </ol>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#setting-parameters","title":"Setting parameters","text":"Type Parameter Feature <code>int</code> <code>_outputHz</code> Period to output."},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#output-data","title":"Output data","text":"<p>It is contained in the <code>GnssSensor.IReadOnlyOutputData</code> type.</p> Type Parameter Feature <code>Mgrs</code> <code>Mgrs</code> MGRS coordinate system position. <code>GeoCoordinate</code> <code>GeoCoordinate</code> GeoCoordinate coordinate system position."},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#geo-reference","title":"Geo reference","text":"<p><code>GnssSensor</code> outputs the sum of the origin value set for each geo reference and the value obtained by converting the Unity world coordinates to each geo reference. There are two classes of georeferencing.</p> Geo reference Feature <code>MgrsPosition</code> Origin value of the Unity world coordinate system (0, 0, 0) transformed in the MGRS system. <code>GeoCoordinatePosition</code> Origin value of the Unity world coordinate system (0, 0, 0) transformed in the Geo coordinate system."},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#add-output-callback","title":"Add output callback","text":"<p>GnssSensor can add an <code>Action</code> type callback that takes <code>GnssSensor.IReadOnlyOutputData</code> as an argument.</p> <pre><code>// sample code from GnssRos2Publisher.cs\n_gnssSensor.OnOutput += Publish;\n</code></pre> <p> </p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#gnssros2publisher-class","title":"GnssRos2Publisher class","text":"<p><code>GnssRos2Publisher</code> converts the output of <code>GnssSensor</code> to ROS2 and publishes the topic.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#setting-parameters_1","title":"Setting parameters","text":"Type Parameter Feature <code>string</code> <code>_poseTopic</code> <code>geometry_msgs/Pose</code> msg topic name. <code>string</code> <code>_poseWithCovarianceStampedTopic</code> <code>geometry_msgs/PoseWithCovarianceStamped</code> msg topic name. <code>string</code> <code>_frameID</code> Frame ID of ros2. <code>QosSettings</code> <code>_qosSettings</code> Quality of Service settings of ros2. <code>GnssSensor</code> <code>_gnssSensor</code> Target <code>GnssSensor</code> instance."},{"location":"DeveloperGuide/Layer/Entity/Sensor/GnssSensor/#default-publish-topics","title":"Default publish topics","text":"<p><code>GnssRos2Publisher</code> is configured by default with the following two topics publsiih.</p> Topic Message type <code>frame_id</code> <code>Hz</code> <code>QoS</code> <code>/sensing/gnss/pose</code> <code>geometry_msgs/Pose</code> <code>gnss_link</code> <code>1</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/sensing/gnss/pose_with_covariance</code> <code>geometry_msgs/PoseWithCovarianceStamped</code> <code>gnss_link</code> <code>1</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/ImuSensor/","title":"IMU sensor","text":"<p><code>IMUSensor</code> is a component that simulates an IMU (Inertial Measurement Unit) sensor. Measures acceleration (\\({m}/{s^2}\\)) and angular velocity (\\({rad}/{s}\\)) based on the transformation of the GameObject to which this component is attached.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/ImuSensor/#prefab","title":"Prefab","text":"<pre><code>Assets/Awsim/Entity/EgoVehicle/Imu/ImuSensor.prefab\n</code></pre>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/ImuSensor/#imusensor-class","title":"ImuSensor class","text":"<p><code>ImuSensor</code> outputs linear acceleration and angular velocity at a configured period.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/ImuSensor/#how-to-use","title":"How to use","text":"<ol> <li>Initialize <code>ImuSensor</code>.</li> <li>Other MonoBehaviour's<code>FixedUpdate()</code> calls <code>ImuSensor.OnFixedUpdate()</code></li> </ol>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/ImuSensor/#setting-parameters","title":"Setting parameters","text":"Type Parameter Feature <code>int</code> <code>_outputHz</code> Period to output. <code>bool</code> <code>_enableGravity</code> Flag to include gravity in output."},{"location":"DeveloperGuide/Layer/Entity/Sensor/ImuSensor/#output-data","title":"Output data","text":"<p>It is contained in the <code>ImuSensor.IReadOnlyOutputData</code> type.</p> Type Parameter Feature <code>Vector3</code> <code>LinearAcceleration</code> Acceleration (\\({m}/{s^2}\\)). <code>Vector3</code> <code>AngularVelocity</code> Angular velocity (\\({rad}/{s}\\))."},{"location":"DeveloperGuide/Layer/Entity/Sensor/ImuSensor/#add-output-callback","title":"Add output callback","text":"<p><code>ImuSensor</code> can add an <code>Action</code> type callback that takes <code>ImuSensor.IReadOnlyOutputData</code> as an argument.</p> <pre><code>// sample code from ImuRos2Publisher.cs\n_gnssSensor.OnOutput += Publish;\n</code></pre> <p></p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/ImuSensor/#imuros2publisher-class","title":"ImuRos2Publisher class","text":"<p><code>ImuRos2Publisher</code> converts the output of <code>ImuSensor</code> to ROS2 and publishes the topic.</p>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/ImuSensor/#setting-parameters_1","title":"Setting parameters","text":"Type Parameter Feature <code>string</code> <code>_topic</code> <code>geometry_msgs/Pose</code> msg topic name. <code>string</code> <code>_frameID</code> Frame ID of ros2. <code>QosSettings</code> <code>_qosSettings</code> Quality of Service settings of ros2. <code>ImuSensor</code> <code>_imuSensor</code> Target <code>ImuSensor</code> instance."},{"location":"DeveloperGuide/Layer/Entity/Sensor/ImuSensor/#default-publish-topics","title":"Default publish topics","text":"<p><code>ImuRos2Publisher</code> is configured by default with the following two topics publsiih.</p> Topic Message type <code>frame_id</code> <code>Hz</code> <code>QoS</code> <code>/sensing/imu/tamagawa/imu_raw</code> <code>sensor_msgs/Imu</code> <code>tamagawa/imu_link</code> <code>30</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1000</code></li>"},{"location":"DeveloperGuide/Layer/Entity/Sensor/LidarAndSensor/","title":"LiDAR & Radar sensor","text":"<p>AWSIM uses RobotecGPULidar for Lidar and Radar simulations.</p>"},{"location":"DeveloperGuide/Layer/Entity/Vehicle/AccelVehicle/","title":"Accel vehicle","text":"<p><code>AccelVehicle</code> is acceleration based vehicle. This vehicle model was created for Autoware simulation, and assuming that Autoware has already created a gas pedal map, this vehicle model uses acceleration as an input value. It has the following features:</p> <ul> <li>Longitudinal control by acceleration (\\(\\frac{m}{s^2}\\)).</li> <li>Lateral control by two-wheel model.</li> <li>Yaw, roll and pitch controlled by Physics engine.</li> <li>Mass-spring-damper suspension model (<code>WheelColliders</code>).</li> <li>automatic gears change.</li> <li>3D Mesh as road surface for vehicle driving, gradient resistance.</li> </ul>"},{"location":"DeveloperGuide/Layer/Entity/Vehicle/AccelVehicle/#prefab","title":"Prefab","text":"<p>Please refer to <code>Lexus RX450h 2015.prefab</code> as a sample prefab</p>"},{"location":"DeveloperGuide/Layer/Entity/Vehicle/AccelVehicle/#related-classes","title":"Related classes","text":"Class Feature AccelVehicle The main script of <code>AccelVehicle</code>. AccelVehicleGroundSlip Apply slip to <code>AccelVehicle</code>. AccelVehicleVisualEffect Visuals such as tires and lights for <code>AccelVehicle</code>. IReadOnlyAccelVehicle Read only interface of <code>AccelVehicle</code>. AccelVehicleControlModeBasedInputter Input classes supporting Autoware control input override. AccelVehicleKeyboardInput Keyboard input for <code>AccelVehicle</code>. AccelVehicleLogitechG29Input Logitech G29 steering wheel input for <code>AccelVehicle</code>. AccelVehicleRos2Input ROS2 input for <code>AccelVehicle</code>. IAccelVehicleInput Interface for input class. AccelVehicleControlModeSrvServer ROS2 service server with switchable Autoware's vehicle control mode. AccelVehicleReportRos2Publisher ROS2 publisher to publish topics for Autoware's vehicle report. AccelVehicleRos2MsgConverter ROS (Autoware) and Unity (Awsim) type conversion."},{"location":"DeveloperGuide/Layer/Entity/Vehicle/AccelVehicle/#autowares-vehicle-control-mode","title":"Autoware's vehicle control mode","text":""},{"location":"DeveloperGuide/Layer/Entity/Vehicle/AccelVehicle/#assigned-key-list","title":"Assigned key list","text":"<p>By default, each key is assigned to the following classes.</p> <ul> <li>AccelVehicleKeyboardInput</li> </ul> Key Feature D Switch to move drive gear. R Switch to move reverse gear. N Switch to neutral gear. P Switch to parking gear. Up arrow Forward acceleration. Down arrow Reverse acceleration. Left arrow Left turning. Right arrow right turning. 1 Turn left blinker on. 2 Turn right blinker on. 3 Turn on hazard lights. 4 Turn off blinker or hazard lights. C Switch control mode <code>MANUAL</code> to <code>AUTONOMOUS</code> <ul> <li>AccelVehicleLogitechG29Input</li> </ul> Key Feature Triangle Switch to move drive gear. Square Switch to move reverse gear. Circle Switch to neutral gear. Cross Switch to parking gear. Throttle pedal Forward acceleration. Brake pedal Reverse acceleration. Steering wheel Turning. Left paddle Turn left blinker on. Right paddle Turn right blinker on. R2 Turn on hazard lights. R3 Turn off blinker or hazard lights. L2 Switch control mode <code>AUTONOMOUS</code> to <code>MANUAL</code> L3 Switch control mode <code>MANUAL</code> to <code>AUTONOMOUS</code>"},{"location":"DeveloperGuide/Layer/Entity/Vehicle/AccelVehicle/#create-custom-vehicle","title":"Create custom vehicle","text":"<p>It is easier to understand if you refer to <code>Lexus RX450h 2015.prefab</code>.</p> <ol> <li>Prepare a 3D model of the vehicle. (Separate the wheels, body and lights)</li> <li>Set up <code>WheelCollider</code> for each wheel and <code>MeshCollider</code> or other collider for vehicle body.</li> <li>Attach the <code>Rigidbody</code> component to the vehicle and configure inspector.</li> <li>Attach the <code>AccelVehicle.cs</code> script to the vehicle and configure inspector.</li> <li>Attach the <code>AccelVehicleVisualEffect.cs</code> script to the vehicle and configure inspector.</li> <li>Attach the <code>AccelVehicleControlModeBasedInputter</code> script the vehicle and configure inspector.</li> <li>Attach and configure any VehicleInput classes (<code>AccelVehicleKeyboardInput</code>, <code>AccelVehicleRos2Input</code>, <code>AccelVehicleLogitechG29Input</code>) that inherits from <code>IAccelVehicleInput</code>.</li> <li>(optional) By attaching <code>AccelVehicleReportRos2Publisher</code> and <code>AccelVehicleControlModeSrvServer</code>, it is possible to connect to Autoware.</li> </ol>"},{"location":"DeveloperGuide/Layer/Entity/Vehicle/AccelVehicle/#create-custom-input","title":"Create custom input","text":"<ol> <li>Create a new class that inherits from <code>IAccelVehicleInput</code>.</li> <li>Implement updates to the values of <code>IAccelVehicleInput</code> input values.</li> <li>Reference the custom input class you created to <code>AccelVehicleControlModeBasedInputter</code> and use it in either autonomous mode or manual mode.</li> </ol>"},{"location":"DeveloperGuide/Layer/Entity/Vehicle/PoseVehicle/","title":"Pose vehicle","text":"<p><code>PoseVehicle</code> is pose (position and rotation) input based vehicle. This vehicle model is mainly used to control NPC vehicles. Controlling vehicles through pose input enables more versatile traffic simulation.</p> <p>Info</p> <p>Ego vehicle mainly uses acceleration-based input for vehicle dynamics. For details, here.</p>"},{"location":"DeveloperGuide/Layer/Entity/Vehicle/PoseVehicle/#prefab","title":"Prefab","text":"<p>Path : <code>Assets\\Awsim\\Prefabs\\Entity\\Npc\\Vehicle\\*</code></p> Hatchback SmallCar Taxi Truck Van Appearance Prefab <code>Hatchback.prefab</code> <code>SmallCar.prefab</code> <code>Taxi-64.prefab</code> <code>Truck_2t.prefab</code> <code>Van.prefab</code>"},{"location":"DeveloperGuide/Layer/Entity/Vehicle/PoseVehicle/#physics-engine-effect","title":"Physics engine effect","text":"<p><code>PoseVehicle</code> improves realism by allowing the physics engine to affect certain axes.</p> Axis Note Position x input value. Position y Physics engine. Position z input value. Rotation x input value. Rotation y input value. Rotation z Physics engine."},{"location":"DeveloperGuide/Layer/Entity/Vehicle/PoseVehicle/#how-to-use","title":"How to use","text":"<ol> <li>Attach the <code>PoseVehicle</code> script to the vehicle game object and set up each item.</li> <li>Call <code>PoseVehicle.Initialize()</code> during initialization.</li> <li>Enter a value in <code>PoseVehicle.PoseInput</code> before calling <code>OnFixedUpdate()</code>.</li> <li>Call <code>OnUpdate()</code> in <code>Update()</code> and <code>OnFixedUpdate()</code> in <code>FixedUpdate()</code>.</li> </ol>"},{"location":"DeveloperGuide/Layer/UI/","title":"UI","text":"<p>AWSIM has a unified UI system. Also, the UI does not contain critical logic. For this reason, it is ranked higher among Layers. It AWSUN UI system created based on UGUI.</p> <p>The following features are available.</p> <ul> <li>Moving UI windows by drag &amp; drop</li> <li>UI Scale Adjustment</li> <li>On/Off for each UI window</li> <li>UI window position memorization and resetting</li> <li>Extensibility-aware UI base class</li> </ul>"},{"location":"DeveloperGuide/Layer/UI/#ui-core-components","title":"UI Core components","text":"Class Feature AwsimCanvas This is the core class of AWSIM's UI system. It has a reference to each UI class and handles all UI functions centrally. UIWindow Base class for each UIWindow. Custom UI classes can inherit from this class to easily utilize the functionality of the AWSIM UI system."},{"location":"DeveloperGuide/Layer/UI/#create-custom-ui","title":"Create custom UI","text":"<ol> <li>Create a custom UI class that extends the <code>UIWindow</code> class</li> <li>Create a gameobject with a custom UI class.</li> <li>Place <code>AwsimCanvas.prefab</code> in the scene. (path : <code>Asstes\\Awsim\\Prefabs\\UI\\AwsimCanvas\\AwsimCanvas.prefab</code>)</li> <li>Place gameobject with custom UI class under <code>AwsimCanvas/UIWindows</code> in the hierarchy.</li> <li>Referencing a custom UI class in the <code>UiWindows</code> field of AwsimCanvas.</li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/AwsimRvizPlugins/","title":"AwsimRvizPlugins","text":"<p>Feature to operate AWSIM environment from the Rviz plugins.</p> <p></p> <p>The following features are implemented:</p> <ul> <li><code>2D Pose Teleport</code>: Teleport AWSIM EGO pose from Rviz GUI tool</li> <li><code>Npc Spawner</code>: Spawn AWSIM Npc using Rviz GUI tool</li> </ul> <p>Rviz plugins are implemented in the following repositories:</p> <ul> <li>https://github.com/tier4/AwsimRvizPlugins</li> </ul> <p>Info</p> <p>If you want to use <code>AwsimRvizPlugins</code> with <code>AWSIM</code>, see here.</p>"},{"location":"DeveloperGuide/Layer/Usecase/AwsimRvizPlugins/#abstract","title":"Abstract","text":""},{"location":"DeveloperGuide/Layer/Usecase/AwsimRvizPlugins/#2d-pose-teleport","title":"2D Pose Teleport","text":"<p>Teleport AWSIM EGO using Rviz GUI tool. </p> <p><code>awsim_rviz_plugins/2dPoseTeleport</code> tool gets position and orientation by dragging on the map displayed in Rviz, and publishes those as a <code>/awsim/awsim_rviz_plugins/pose_teleport/pose_with_covariance</code> topic.</p> <p>AWSIM subscribes this topic and updates the coordinates of the EGO.</p> <p>y-axis of destination position of teleport is calculated using ray-casting. The highest object at the specified x-z coordinates is considered the ground.</p>"},{"location":"DeveloperGuide/Layer/Usecase/AwsimRvizPlugins/#nps-spawner","title":"Nps Spawner","text":"<p>Spawn AWSIM Npc using Rviz GUI tool. Type and velocity of spawned Npc is specified from Rviz display.</p> <p></p> <p><code>awsim_rviz_plugins/NpsSpawner</code> tool gets position and orientation by dragging on the map displayed in Rviz, and publishes those as a <code>/awsim/awsim_rviz_plugins/npc_spawner/pose_with_covariance</code> topic.</p> <p>AWSIM subscribes this topic and spawn Npc on the coordinates.</p> <p>y-axis of destination position of teleport is calculated using ray-casting. The highest object at the specified x-z coordinates is considered the ground.</p> <p><code>awsim_rviz_plugins/NpsSpawnerStatus</code> display is entered Npc type (drop down list) and velocity, and publishes those as a <code>/awsim/awsim_rviz_plugins/npc_spawner/npc_name</code> and <code>/awsim/awsim_rviz_plugins/npc_spawner/npc_velocity</code> topic.</p> <p>AWSIM subscribes those topics and specify type and velocity of spawned Npc.</p> <p>Spawnable Npc is listed in <code>AutowreSimulationDemo/Function/AwsimRvizPluginsClient/</code>. AWSIM publishes name of spawnable Npc as <code>/awsim/awsim_rviz_plugins/npc_spawner/npc_name_list</code> topic. <code>awsim_rviz_plugins/NpsSpawnerStatus</code> display subscribes this topic and update drop down list of Npc type.  </p>"},{"location":"DeveloperGuide/Layer/Usecase/AwsimRvizPlugins/#overview","title":"Overview","text":"<p><code>Awsim Rviz Plugins</code> consists of the following flow:</p> <pre><code>graph LR\n    subgraph A[\"2D Pose Teleport::OnFixedUpdate()\"]\n        direction TB\n        AA{Topic is Subscribed}--\"yes\"--&gt;ABA\n        subgraph AB[\"2D Pose Teleport::Spawn()\"]\n            direction TB\n            ABA(\"Ray cast to get floor y-axis\")--&gt;ABB(\"Update Ego position\")--&gt;ABC(\"Update Ego rotation\")\n        end\n        ABC--&gt;AC(\"End\")\n        AA--\"no\"--&gt;AC\n    end\n\n    A~~~B\n\n    subgraph B[\"Nps Spawner::OnFixedUpdate()\"]\n        direction TB\n        BA{ReadyVehicle is on Ground}--\"yes\"--&gt;BB(\"ReadyVehicle add NpcVehicleList\")--&gt;BC(\"ReadyVehicle::OnFixedUpdate()\")--&gt;BD(\"NpcVehicleList::OnFixedUpdate()\")--&gt;BE(\"NpcPedestrianList::OnFixedUpdate()\")--&gt;BF{Topic is Subscribed}--\"yes\"--&gt;BG{Type of spawning Npc}--\"Vehicle\"--&gt;BH(\"Spawn and add ReadyVehicle\")--&gt;BJ(\"End\")\n\n        BG--\"Pedestrian\"--&gt;BI(\"Spawn and add NpcPedestrianList\")--&gt;BJ\n\n        BA--\"no\"--&gt;BC\n        BF--\"no\"--&gt;BJ\n    end</code></pre>"},{"location":"DeveloperGuide/Layer/Usecase/AwsimRvizPlugins/#configuration","title":"Configuration","text":"<p><code>Awsim Rviz Plugins</code> can be configured from <code>AwsimRvizPluginsClient</code> component.</p> <p></p> <p>The configurable elements are listed in the following table:</p> <p>2D Pose Teleport</p> Parameter Description Ego Transform Ego vehicle which is controlled by this plugin. Ego Position Topic Name of topic about position which Ego teleport. <p>Npc Spawner Settings</p> Parameter Description Npc Vehicle Prefabs List of Npc vehicle.Each element have identifier (<code>Name</code>) and reference (<code>Prefab</code>). Npc Pedestrian Prefabs List of Npc pedestrian.Each element have identifier (<code>Name</code>) and reference (<code>Prefab</code>). Npc Position Topic Name of topic about position which Npc spawn. Npc Name Topic Name of topic about type of spawned Npc. Npc Velocity Topic Name of topic about velocity of spawned Npc. Npc Name List Topic Name of topic about list of vehicle names in <code>Rviz</code>."},{"location":"DeveloperGuide/Layer/Usecase/AwsimRvizPlugins/#instruction","title":"Instruction","text":"<p>To use <code>Awsim Rviz Plugins</code>, please follow the steps below.</p> <p></p>"},{"location":"DeveloperGuide/Layer/Usecase/AwsimRvizPlugins/#1-place-awsimrvizpluginsclient","title":"1. Place <code>AwsimRvizPluginsClient</code>","text":"<p>Please create <code>AwsimRvizPluginsClient</code> component as the following:</p> <ol> <li>Create empty <code>GameObject</code> (should be named <code>AwsimRvizPluginsClient</code>)</li> <li>Attach this object to <code>AwsimRvizPluginsClient</code> component</li> <li>Fill in <code>Ego Transform</code> field with EGO vehicle</li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/AwsimRvizPlugins/#2-fill-in-npc-spawner-settings","title":"2. Fill in <code>Npc Spawner Settings</code>","text":"<p>Please configure <code>Npc Spawner Settings</code> component as the following:</p> <ol> <li>Add and fill list element of <code>Npc Vehicle Prefabs</code><ol> <li>Fill in <code>Name</code> field with any name (prefab name recommended)</li> <li>Fill in <code>Prefab</code> field with vehicle prefab which is attached <code>PoseVehicle</code> component</li> </ol> </li> <li>Add and fill list element of <code>Npc Pedestrian Prefabs</code><ol> <li>Fill in <code>Name</code> field with any name (prefab name recommended)</li> <li>Fill in <code>Prefab</code> field with vehicle prefab which is attached <code>Pedestrian</code> component</li> </ol> </li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/","title":"PcdGeneration","text":""},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#abstract","title":"Abstract","text":"<p><code>Pcd Generation</code> is a tool for a vehicle based point cloud mapping in a simulation environment. It is useful when you need a point cloud based on some location, but are not able to conduct physically mapping on the real place.</p> <p></p> <p>When <code>Pcd Generation</code> is conducted, <code>Vehicle</code> object (carrying <code>LiDAR</code>) is warped along all centerlines of lanelets in the imported <code>OSM</code> map. Point cloud map is generated to record points by <code>LiDAR</code> on <code>Vehicle</code> object on each centerlines of lanelets.</p>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#overview","title":"Overview","text":"<p><code>Traffic Simulation</code> consists of the following flow:</p> <pre><code>graph TB\n    subgraph A[\"PcdGeneration::Initialize()\"]\n        direction TB\n        AA(\"Load LaneletMap\")~~~AB(\"Create `Capture Pose Queue`\")\n    end\n\n    AB--&gt;BA\n\n    subgraph B[\"PcdGeneration::OnUpdate()\"]\n        direction TB\n        BA--\"yes\"--&gt;BE(\"PcdGeneration::SavePcd()\")\n        BA{`Capture Pose Queue` is empty}--\"no\"--&gt;BB(\"Dequeue `Capture Pose Queue`\")--&gt;BC(\"Move pose\")--&gt;BD(\"Capture by LiDAR\")--&gt;BA\n    end</code></pre>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#configuration","title":"Configuration","text":"<p><code>PcdGeneration</code> can be configured from <code>PcdGenerator</code> and <code>RGLMappingAdapter</code> components.</p> <p>The configurable elements are listed in the following table:</p> <p>PcdGenerator</p> Parameter Description Osm Data Container Imported <code>OSM</code> file. Vehicle Transform Game object containing sensors to capture pointcloud. Rgl Mapping Adapter Reference of <code>LiDAR</code> object which is attached <code>RGLMappingAdapter</code>. Output Pcd File Path Result <code>PCD</code> file name.On captured, it will be saved in <code>Assets/[Output Pcd File Path]</code> Capture Location Interval Distance in meters between consecutive warps along the centerline of a lanelet. World Origin ROS World origin in ROS coordinate systems, will be added to every point coordinates. <p>RGLMappingAdapter</p> Parameter Description Enable Downsampling Enable/disable point cloud data downsampling. Leaf Size Resolution of point cloud data downsampling."},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#execution-and-parameters","title":"Execution and Parameters","text":""},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#execution","title":"Execution","text":"<p>If you play prepared scene, <code>PcdGenerator</code> will automatically start mapping. <code>PCD</code> file will be written when you stop scene or all lanelets in the route are captured.</p> <p>If the <code>Vehicle</code> stops moving and you see the following message in the bottom left corner, you can safely stop the scene.</p> <p><code>pcd save success</code></p> <p>The Point cloud (<code>*.pcd</code>) file is saved to the location you specified in the <code>Output Pcd File Path</code> of <code>PcdGenerator</code>.</p>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#parameters","title":"Parameters","text":"<p>Following parameters are useful to point cloud map of quality and file size you want to.</p>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#leaf-size","title":"Leaf Size","text":"<p>Downsampling aims to reduce <code>PCD</code> size which for large point clouds may achieve gigabytes in exchange for map details. It is essential to find the acceptable balance between the file size and details level.</p> <p><code>Leaf Size</code> can be configured by <code>RGLMappingAdapter</code> component.</p> <p>A small <code>Leaf Size</code> results in a more detailed <code>PCD</code>, while a large <code>Leaf Size</code> could result in excessive filtering such that objects like buildings are not recorded in the <code>PCD</code>.</p> Leaf Size = 1.0 Leaf Size = 10.0 Leaf Size = 100.0"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#capture-location-interval","title":"Capture Location Interval","text":"<p>If the <code>Capture Location Interval</code> is too small, it could result in a sparse <code>PCD</code> where some region of the map is captured well but the other regions aren't captured at all.</p> <p><code>Capture Location Interval</code> can be configured by <code>PcdGeneration</code> component.</p> Capture Location Interval = 6 Capture Location Interval = 20 Capture Location Interval = 100"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#instruction","title":"Instruction","text":"<p>To use <code>Pcd Generation</code>, please follow the steps below.</p> <p>For the preparation, the following must be prepared:</p> <ul> <li>3D map (.fbx)</li> <li>lanelet map (.osm)</li> <li>LiDAR sensor (.fbx)</li> </ul> <p>Info</p> <p>AWSIM includes <code>PcdGenerationDemo</code> scene. Please refer to: * <code>Assets/Awsim/Scenes/PcdGenerationDemo.unity</code></p>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#1-add-a-vehicle-object","title":"1. Add a <code>Vehicle</code> object","text":"<p>Add <code>Vehicle</code> object to carry LiDAR and capture points. In addition, visual elements of <code>Vehicle</code> if needed.</p> <p></p> <p>Please create <code>Vehicle</code> object as the following:</p> <ol> <li>Create empty <code>GameObject</code> (should be <code>Vehicle</code>)</li> <li>(optional) Create empty <code>GameObject</code> (should be <code>Vehicle/Geometry</code>)<ol> <li>If needed, visual elements of <code>Vehicle</code> added here</li> <li>Visual element can even be a simple <code>Cube</code> object as the sample image</li> </ol> </li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#2-add-a-camera","title":"2. Add a <code>Camera</code>","text":"<p>Add Unity <code>Camera</code> to visualize recording process.</p> <p></p> <p>Please create Unity <code>Camera</code> as the following:</p> <ol> <li>Create <code>Camera</code> object (should be <code>Vehicle/Follow Camera</code>)</li> <li>Attach <code>FollowCamera</code> component to <code>Follow Camera</code></li> <li>Fill in <code>Target</code> field with <code>Vehicle</code></li> <li>Modify <code>Transform</code><ol> <li>Using <code>Cameras</code> Unity view allows you to check the camera view</li> </ol> </li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#3-add-a-lidar-related-objects","title":"3. Add a <code>LiDAR</code> related objects","text":"<p>Add <code>LiDAR</code> object and configure components to record points.</p> <p></p>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#lidar-object","title":"LiDAR object","text":"<p>Please create and configure <code>LiDAR</code> object as the following:</p> <ol> <li>Create <code>LiDAR</code> object (should be <code>Vehicle/LiDAR</code>)</li> <li>Set <code>Transform.Position.Y</code> 2.5</li> <li>Attach <code>PointCloudVisualization</code> component to <code>LiDAR</code></li> <li>Attach <code>LidarSensor</code> component to <code>LiDAR</code><ol> <li>Select <code>Model Preset</code> (<code>VelodyneVLP16</code> and <code>VelodyneVLS128</code> is recommended)<ol> <li><code>VelodyneVLS128</code> can create more detail maps than <code>VelodyneVLP16</code></li> <li><code>VelodyneVLP16</code> can work lighter than <code>VelodyneVLS128</code></li> </ol> </li> <li>Set <code>Apply Distance Gaussian Noise</code> and <code>Apply Angular Gaussian Noise</code> <code>False</code></li> </ol> </li> <li>Attach <code>RGLMappingAdapter</code> component to <code>LiDAR</code></li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#rglscenemanager","title":"RGLSceneManager","text":"<p>Please create <code>SceneManager</code> object as the following:</p> <ol> <li>Create empty <code>GameObject</code> (should be <code>RGLSceneManager</code>)</li> <li>Attach <code>SceneManager</code> component to <code>RGLSceneManager</code></li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#4-setup-pcdgenerator","title":"4. Setup <code>PcdGenerator</code>","text":"<p>Add <code>PcdGenerator</code> component to manage above objects and create point cloud map.</p> <p></p> <ol> <li>Create empty <code>GameObject</code> (should be <code>PcdGenerator</code>)</li> <li>Attach <code>PcdGenerator</code> component to <code>PcdGenerator</code></li> <li>Fill in <code>Osm Data Container</code> field with <code>.osm</code> file<ol> <li>If there is not <code>.osm</code> file in project, move <code>.osm</code> file to <code>Assets/Awsim/Externals</code> directory using file expoler</li> </ol> </li> <li>Fill in <code>Vehicle Transform</code> field with <code>Vehicle</code></li> <li>Fill in <code>Rgl Mapping Adapter</code> field with <code>LiDAR</code></li> <li>(optional) Fill in <code>World Origin ROS</code> field if your map has <code>Mgrs Position</code> component </li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#5-call-methods-of-pcdgenerator-and-followcamera","title":"5. Call methods of <code>PcdGenerator</code> and <code>FollowCamera</code>","text":"<p>Some methods of <code>PcdGenerator</code> and <code>FollowCamera</code> should be called from callback of <code>MonoBehaviour</code> to enable <code>Pcd Generation</code>.</p> <p>Please implement as the following:</p> <ol> <li>Create or open class which is inherit <code>MonoBehaviour</code></li> <li>Make fields of <code>PcdGenerator</code> and <code>FollowCamera</code></li> <li>Add description of calling method of <code>PcdGenerator</code> and <code>FollowCamera</code></li> </ol> <p>The method should be called are listed in the following table:</p> <p><code>Pcd Generation</code></p> Method Description Initialize() Should be called Start() callback. OnUpdate() Should be called Update() callback. <p><code>FollowCamera</code></p> Method Description Initialize() Should be called Start() callback. OnUpdate() Should be called Update() callback. <p>Info</p> <p>AWSIM includes <code>AutowareSimulationDemo</code> scene. Please refer to: * <code>Assets/Awsim/Scenes/PcdGenerationDemo/PcdGenerationDemo.cs</code> * <code>Assets/Awsim/Scenes/PcdGenerationDemo.unity</code> scene</p>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#modify-and-verify-pcd-files","title":"Modify and Verify <code>PCD</code> files","text":""},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#modify-pcd","title":"Modify <code>PCD</code>","text":"<p>Generated <code>PCD</code> files should be downsample because they are typically too large. In addition, they should be converted to ASCII format because <code>Autoware</code> accepts only this format. (<code>Pcd Generation</code> returns PCD in binary format)</p> <p>The tool (<code>DownsampleLargePCD</code>) can realize downsampling and converting <code>PCD</code> files. Please clone and build <code>DownsampleLargePCD</code> tool following Github repository.</p> <p>Please use <code>DownsampleLargePCD</code> tool as the following:</p> <ol> <li>Change the working directory to the location with <code>DownsampleLargePCD</code> tool.</li> <li>Use <code>DownsampleLargePCD</code> tool to downsample and save <code>PCD</code> in <code>ASCII</code> format.     <pre><code>./DownsampleLargePCD -in &lt;PATH_TO_INPUT_PCD&gt; -out &lt;PATH_TO_OUTPUT_PCD&gt; -leaf 0.2,0.2,0.2\n</code></pre><ul> <li>You can also save <code>PCD</code> in binary format by adding <code>-binary 1</code> option.</li> </ul> </li> </ol> <p>Note</p> <p>If you don't want to downsample but want to convert <code>PCD</code> file to <code>ASCII</code>, you should use <code>pcl_convert_pcd_ascii_binary</code> tool. This tool is available in the <code>pcl-tools</code> package and can be installed on Ubuntu with the following command: <pre><code>sudo apt install pcl-tools\n</code></pre> To convert your PCD use command: <pre><code>pcl_convert_pcd_ascii_binary &lt;PATH_TO_INPUT_PCD&gt; &lt;PATH_TO_OUTPUT_PCD&gt; 0\n</code></pre></p>"},{"location":"DeveloperGuide/Layer/Usecase/PcdGeneration/#verify-pcd","title":"Verify <code>PCD</code>","text":"<p>To verify your <code>PCD</code> you can launch the <code>Autoware*</code>(https://github.com/autowarefoundation/autoware).</p> <p>Please verify <code>PCD</code> as the following:</p> <ol> <li> <p>Copy your <code>PCD</code> from the <code>AWSIM</code> project directory to the <code>Autoware</code> map directory     <pre><code>cp &lt;PATH_TO_PCD_FILE&gt; &lt;PATH_TO_AUTOWARE_MAP&gt;/\n</code></pre></p> </li> <li> <p>Source the <code>ROS</code> and <code>Autoware</code> <pre><code>source /opt/ros/humble/setup.bash\nsource &lt;PATH_TO_AUTOWARE&gt;/install/setup.bash\n</code></pre></p> </li> <li> <p>Launch the <code>planning simulation</code> with the map directory path (<code>map_path</code>) and PCD file (<code>pointcloud_map_file</code>) specified     <pre><code>ros2 launch autoware_launch planning_simulator.launch.xml \\\nvehicle_model:=sample_vehicle \\\nsensor_model:=sample_sensor_kit \\\nmap_path:=&lt;ABSOLUTE_PATH_TO_AUTOWARE_MAP&gt; \\\npointcloud_map_file:=&lt;PCD_FILE_NAME&gt;\n</code></pre></p> <p>PCD file location</p> <p>The PCD file needs to be located in the Autoware map directory and as a <code>pointcloud_map_file</code> parameter you only supply the file name, not the path.</p> <p>Absolute path</p> <p>When launching <code>Autoware</code> never use <code>~/</code> to specify the home directory. Either write the full absolute path or use <code>$HOME</code> environmental variable.</p> </li> <li> <p>Wait for the <code>Autoware</code> to finish loading and inspect the <code>PCD</code> visually given the effect of <code>Leaf Size</code> and effect of <code>Capture Location Interval</code>.</p> </li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/","title":"ScenarioSimulatorConnection","text":"<p><code>Scenario Simulator Connection</code> is a scene setting for connecting <code>Scenario Simulator v2</code>. This page provides an overview of connecting to <code>Scenario Simulator v2</code> and instruction of the scene.</p> <p></p> <p>Info</p> <p>If you want to use <code>OpenSCENARIO</code> with <code>AWSIM</code>, see here.</p>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#abstract","title":"Abstract","text":"<p><code>Scenario Simulator v2</code> (<code>SS2</code>) is a scenario testing framework specifically developed for <code>Autoware</code>. It serves as a tool for <code>Autoware</code> developers to conveniently create and execute scenarios across different simulators. </p> <p><code>Scenario Simulator Connection</code> uses <code>ZeroMQ</code> Inter-Process communication for seamless interaction between the <code>AWSIM</code> and the <code>SS2</code>. To ensure synchronous operation of the <code>SS2</code>, <code>Scenario Simulator Connection</code> utilizes the <code>Request/Reply</code> sockets provided by <code>ZeroMQ</code> and exchanges binarized data through <code>Protocol Buffers</code>. This enables the <code>SS2</code> to run in a synchronized manner, enhancing the accuracy and reliability of scenario testing.</p> <p>Note</p> <p>If you would like to see how <code>SS2</code> works with <code>Autoware</code> using default build-in simulator - <code>simple_sensor_simulator</code> (without running AWSIM) - we encourage you to read this tutorial.</p>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#overview","title":"Overview","text":"<p>In the following sequence diagram describes responsible and communication of <code>SS2</code>, <code>AWSIM</code> and <code>Autoware</code>.</p> <p>Communication between <code>SS2</code> and <code>AWSIM</code> takes place via <code>Request-Response</code> messages, and is as follows:</p> Sequence Description Launch <code>Autoware</code> is started and initialized. Initialize the environment in <code>AWSIM</code> is initialized, basic parameters are set. opt Ego spawn optional, <code>EgoEntity</code> (with sensors) is spawned in the configuration defined in the scenario. opt NPC spawn loop optional, all <code>Entities</code> (<code>NPCs</code>) defined in the scenario are spawned, the scenario may contain any number of each <code>Entity</code> type. update loop this is the main loop where scenario commands are executed. It include updating <code>EgoEntity</code>, <code>SS2</code> status, <code>Entities</code>, simulation frame and traffic light state. despawn loop after the end of the scenario, all <code>Entities</code> spawned on the scene are despawned (including <code>EgoEnity</code>). Terminate Autoware is terminated. <p>Documentation of the commands used in the sequence is available here.</p> <pre><code>sequenceDiagram\nparticipant ss2 as Scenario Simulator v2\nparticipant awsim as AWSIM\nparticipant aw as Autoware\n    ss2 -&gt;&gt; aw: Launch\n\n    ss2 -&gt;&gt;+ awsim: InitializeRequest\n    awsim --&gt;&gt;- ss2: InitializeResponse\n\n    opt Ego spawn\n        ss2 -&gt;&gt;+ awsim: SpawnVehicleEntityRequest\n        awsim --&gt;&gt;- ss2: SpawnVehicleEntityResponse\n\n        ss2 -&gt;&gt;+ awsim: AttachLidarSensorRequest\n        awsim --&gt;&gt;- ss2: AttachLidarSensorResponse\n\n        ss2 -&gt;&gt;+ awsim: AttachDetectionSensorRequest\n        awsim --&gt;&gt;- ss2: AttachDetectionSensorResponse\n\n        ss2 -&gt;&gt;+ awsim: AttachOccupancyGridSensorRequest\n        awsim --&gt;&gt;- ss2: AttachOccupancyGridSensorResponse\n    end\n\n    loop NPC spawn\n        opt Vehicle spawn\n            ss2 -&gt;&gt;+ awsim: SpawnVehicleEntityRequest\n            awsim --&gt;&gt;- ss2: SpawnVehicleEntityResponse\n        end\n\n        opt Pedestrian spawn\n            ss2 -&gt;&gt;+ awsim: SpawnPedestrianEntityRequest\n            awsim --&gt;&gt;- ss2: SpawnPedestrianEntityResponse\n        end\n\n        opt Misc Object spawn\n            ss2 -&gt;&gt;+ awsim: SpawnMiscObjectEntityRequest\n            awsim --&gt;&gt;- ss2: SpawnMiscObjectEntityResponse\n        end\n    end\n\n    loop update\n        opt Ego update\n            ss2 -&gt;&gt;+ awsim: UpdateEntityStatusRequest\n            awsim --&gt;&gt;- ss2: UpdateEntityStatusResponse\n            Note right of awsim: Request Ego status\n        end\n\n        opt Npc update\n            ss2 -&gt;&gt;+ awsim: UpdateEntityStatusRequest\n            awsim --&gt;&gt;- ss2: UpdateEntityStatusResponse\n            Note right of awsim: Request Npcs status\n        end\n\n        ss2 -&gt;&gt;+ awsim: UpdateFrameRequest\n\n        awsim -&gt;&gt;+ aw:\n        aw -&gt;&gt;- awsim: ROS2 Communication\n\n        awsim --&gt;&gt;- ss2: UpdateFrameResponse\n\n        ss2 -&gt;&gt;+ awsim: UpdateTrafficLightsRequest\n        awsim --&gt;&gt;- ss2: UpdateTrafficLightsResponse\n    end\n\n    loop despawn\n        ss2 -&gt;&gt;+ awsim: DespawnEntityRequest\n        awsim --&gt;&gt;- ss2: DespawnEntityResponse\n    end\n\n    ss2 -&gt;&gt; aw: Terminate\n</code></pre>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#configuration","title":"Configuration","text":"<p><code>Scenario Simulator Connection</code> can be configured from <code>ScenarioSimulatorClient</code> component.</p> <p>The configurable elements are listed in the following table:</p> Parameter Description Server Response Address Tcp address to connect <code>Scenario Simulator v2</code>. Traffic Lights In Scene Traffic lights which is controlled. Entity Prefabs List of Ego and Npc prefabs.Each element have identifier (<code>Asset Key</code>) and reference (<code>Prefab</code>). Entites Root Hierarchy where Npc spawn. Ego Follow Camera Reference of <code>Follow Camera</code> object. Step Execution Enable the checkbox to perform step execution. Step Duration In Percentage On step execution, frames between each step."},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#instruction","title":"Instruction","text":"<p>To use <code>Scenario Simulator Connection</code>, please follow the steps below.</p> <p>For the preparation, the following must be prepared:</p> <ul> <li>3D map (.fbx)</li> <li>lanelet map (.osm)</li> </ul> <p>Info</p> <p>AWSIM includes <code>IntegrateScenarioSimulatorDemo</code> scene. Please refer to: * <code>Assets/Awsim/Scenes/IntegrateScenarioSimulatorDemo.unity</code></p>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#1-placement-and-settings-of-scenariosimulatorclient","title":"1. Placement and settings of <code>ScenarioSimulatorClient</code>","text":"<p><code>ScenarioSimulatorClient</code> component can mange and connect scenario simulation.</p> <p></p> <p>Please create and configure <code>ScenarioSimulatorClient</code> component as the following:</p> <ol> <li>Create empty <code>GameObject</code> (should be <code>Function/ScenarioSimulatorClient</code>) </li> <li>Attach this object to <code>ScenarioSimulatorClient</code> component</li> <li>Fill in <code>Entities Root</code> field with <code>ScenarioSimulatorClient</code> object itself</li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#2-configuration-of-entity-prefabs","title":"2. Configuration of <code>Entity Prefabs</code>","text":"<p>Configure <code>ScenarioSimulatorClient</code> to be able to use entity in Unity.</p> <p></p> <p>Please configure <code>Entity Prefabs</code> field of <code>ScenarioSimulatorClient</code> as the following:</p> <ol> <li>Fill in <code>Entity Prefabs</code> field with vehicle prefabs what you want to use<ol> <li>Fill <code>Asset Key</code> field with name for identifying prefab</li> <li>Fill <code>Prefab</code> field with Ego and Npc prefab<ol> <li>Ego prefabs is in <code>Assets/Awsim/Prefabs/Entity/Npc/Vehicle/</code></li> <li>Npc prefabs is in <code>Assets/Awsim/Scenes/IntegrateScenarioSimulatorDemo/</code></li> </ol> </li> </ol> </li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#3-camera-setting-of-scenariosimulatorclient","title":"3. Camera setting of <code>ScenarioSimulatorClient</code>","text":"<p>Add <code>Camera</code> component in Unity scene to visualize scenario simulation in <code>AWSIM</code>.</p> <p></p> <p>Please create and configure <code>FollowCamera</code> component as the following:</p> <ol> <li>Create <code>Camera</code> object (should place on <code>Function/</code>)</li> <li>Attach this object to <code>FollowCamera</code> component</li> <li>Fill in <code>Ego FollowCamera</code> field of <code>ScenarioSimulatorClient</code> with this <code>Camera</code> object</li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#4-lanelettrafficlight-settings","title":"4. <code>LaneletTrafficLight</code> settings","text":"<p>Attach and configure <code>LaneletTrafficLight</code> script to all traffic light in the scene.</p> <p></p> <p>Please configure <code>LaneletTrafficLight</code> components as the following:</p> <ol> <li>Attach <code>LaneletTrafficLight</code> to traffic light objects of all traffic light object in the scene</li> <li>Modify <code>Bulb Material Config</code> as follow images vehicle raffic light  pedestrian traffic light <ol> <li>If there are wrong order of bulb, modify each <code>Bulb Material Config</code></li> </ol> </li> <li>Fill in <code>Traffic Lights In Scene</code> field of <code>ScenarioSimulatorClient</code> with all traffic light object in the scene</li> </ol> <p>Info</p> <p>For detailed settings of <code>Bulb Material Config</code>, see here.</p>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#5-load-lanelet","title":"5. Load lanelet","text":"<p><code>LaneletLoader</code> can load a lanelet map and set parameter of traffic rules to traffic lights. <code>LaneletLoader</code> can be performed by opening <code>AWSIM -&gt; Common -&gt; Load Lanelet</code> at the toolbar of Unity Editor.</p> <p></p> <p>Please use <code>LaneletLoader</code> as the following:</p> <ol> <li>Fill in <code>Osm</code> field with a lanelet map (<code>.osm</code>) you prepared</li> <li>Adjust <code>Waypoint settings</code> parameters for the loading process if needed</li> <li>To load the lanelet map, please click <code>Load</code> button </li> <li>Delete <code>TrafficLanes</code> and <code>StopLines</code> object what is generated by <code>LaneletLoader</code></li> </ol> <p>The <code>Waypoint settings</code> parameters are listed in the following table:</p> Parameter Description Resolution Resolution of resampling. Lower values provide better accuracy at the cost of processing time. Min Delta Length Minimum length(m) between adjacent points. Min Delta Angle Minimum angle(deg) between adjacent edges.Lowering this value produces a smoother curve."},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#6-placement-of-clockros2publisher","title":"6. Placement of <code>ClockRos2Publisher</code>","text":"<p>Add <code>ClockRos2Publisher</code> component to synchronize the ROS2 clock of <code>AWSIM</code> and <code>Scenario Simulator v2</code>.</p> <p></p> <p>Please create and configure <code>ScenarioSimulatorClient</code> component as the following:</p> <ol> <li>Create empty <code>GameObject</code> (should be <code>Common/ClockRos2Publisher</code>)</li> <li>Attach this object to <code>ClockRos2Publisher</code> component</li> </ol>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#7-call-methods-of-scenariosimulatorclient-and-clockros2publisher","title":"7. Call methods of <code>ScenarioSimulatorClient</code> and <code>ClockRos2Publisher</code>","text":"<p>Some methods of <code>ScenarioSimulatorClient</code> and <code>ClockRos2Publisher</code> should be called from callback of <code>MonoBehaviour</code> to enable <code>Scenario Simulator Client</code>.</p> <p>Please implement as the following:</p> <ol> <li>Create or open class which is inherit <code>MonoBehaviour</code></li> <li>Make fields of <code>ScenarioSimulatorClient</code> and <code>ClockRos2Publisher</code></li> <li>Add description of calling method of <code>ScenarioSimulatorClient</code> and <code>ClockRos2Publisher</code></li> </ol> <p>The method should be called are listed in the following table:</p> <p><code>ScenarioSimulatorClient</code></p> Method Description Initialize() Should be called Start() callback. OnUpdate() Should be called Update() callback. OnFixedUpdate() Should be called FixedUpdate() callback. <p><code>ClockRos2Publisher</code></p> Method Description Initialize() Should be called Start() callback. OnUpdate() Should be called Update() callback. <p>Info</p> <p>AWSIM includes <code>AutowareSimulationDemo</code> scene. Please refer to: * <code>Assets/Awsim/Scenes/IntegrateScenarioSimulatorDemo/IntegrateScenarioSimulatorDemo.cs</code> * <code>Assets/Awsim/Scenes/IntegrateScenarioSimulatorDemo.unity</code> scene</p>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#scenario-preparation","title":"Scenario preparation","text":"<p>Scenario file should be modified to work <code>Scenario Simulator v2</code> with <code>AWSIM</code>. Note that scenario file must be YAML file that follows <code>TIER IV Scenario Format version 2.0</code>.</p>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#1-model3d-parameter","title":"1. <code>model3d</code> parameter","text":"<p><code>model3d</code> parameter must be added to <code>Vehicle</code> parameter of scenario file to link prefabs in <code>AWSIM</code>. If value of <code>model3d</code> corresponds to <code>Asset Key</code> of <code>ScenarioSimulatorClient</code>, the prefab is spawned in <code>AWSIM</code> when scenario running.</p> <p>The description example is as follows:</p> <pre><code>Vehicle:\n  name: sample_vehicle\n  vehicleCategory: car\n  model3d: \"small_car\"\n</code></pre>"},{"location":"DeveloperGuide/Layer/Usecase/ScenarioSimulatorConnection/#2-entities-parameters","title":"2. Entities parameters","text":"<p><code>Vehicle</code> parameter of scenario file should be match that of prefab in <code>AWSIM</code>. Especially, <code>BoundingBox</code> parameter is crucial to validate the collisions correctly.</p> <p>The entity parameters of default <code>AWSIM</code> assets are listed in the following table:</p> <p>Ego Vehicle Entity</p> model name boundingbox size (m) wheel base(m) front tread(m) rear tread(m) tier diameter(m) max steer(deg) lexus_rx450h width : 1.920  height : 1.700  length : 4.890 2.105 1.640 1.630 0.766 35 <p>NPC Vehicle Entity</p> model name boundingbox size (m) wheel base(m) front tread(m) rear tread(m) tier diameter(m) max steer(deg) taxi width : 1.695  height : 1.515  length : 4.590 2.680 1.460 1.400 0.635 35 truck_2t width : 1.695  height : 1.960  length : 4.685 2.490 1.395 1.240 0.673 40 hatchback width : 1.695  height 1.515  length : 3.940 2.550 1.480 1.475 0.600 35 van width : 1.880  height : 2.285  length : 4.695 2.570 1.655 1.650 0.600 35 small_car width : 1.475  height 1.800  length : 3.395 2.520 1.305 1.305 0.557 35 <p>NPC Pedestrian Entity</p> model name boundingbox size (m) human width : 0.400  height : 1.800  length : 0.300 <p>Misc Object Entity</p> model name boundingbox size (m) sign_board width : 0.31  height : 0.58  length : 0.21 <p>Note</p> <p>If you use prefabs which is no listed above, you need to determine entities parameters by your 3d models.</p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/","title":"TrafficSimulation","text":""},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#abstract","title":"Abstract","text":"<p><code>Traffic Simulation</code> simulates traffic situation follow traffic rules. Spawn points (Spawnable Lanes) and spawnable vehicles can be configured using components and <code>Traffic Simulation</code> simulates traffic situation following configuration.</p> <p></p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#overview","title":"Overview","text":"<p><code>Traffic Simulation</code> consists of the following components:</p> Component Description TrafficSimulator Collecting all traffic simulators and managing the spawning and simulating process. NpcVehicleSpawner Get Npc vehicle states and updating simulation steps. NpcVehicleSimulator Spawning random Npc vehicle in spawning lanes. RandomTrafficSimulator Managing lifecycle of NPCs and simulating NPC behaviours. TrafficLaneTrafficLightTrafficIntersectionStopLine Traffic entities. NpcVehicle Vehicle models (NPCs) controlled by <code>RandomTrafficSimulator</code>."},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#configuration","title":"Configuration","text":"<p><code>Traffic Simulation</code> can be configured from <code>TrafficSimulator</code> component.</p> <p>The configurable elements are listed in the following table:</p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#general-settings","title":"General Settings","text":"Parameter Description Ego Vehicle Ego vehicle handler. If not set, the manager creates a dummy ego.This reference is also set automatically when the Ego spawns via the traffic simulator. Seed Seed value for random generator. Traffic Intersections The field that is set <code>TrafficIntersection</code> objects.<code>TrafficIntersection</code> to be set is controlled by <code>Traffic Simulation</code>."},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#npc-vehicle-settings","title":"NPC Vehicle Settings","text":"Parameter Description Vehicle Config Parameters for NPC vehicle control.<code>Sudden Deceleration</code> is a deceleration related to emergency braking. Obstacle Layer Mask The obstacle layer for raytracing the collision distances. Ground Layer Mask The Ground layer for raytracing the collision distances. Max Vehicle Count The maximum number of vehicles that can simultaneously live in the scene.Lowering this value results in less dense traffic but improves the simulator's performance. Spawn Distance To Ego The minimal distance between the EGO and the NPC to spawn."},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#debug","title":"Debug","text":"Parameter Description Show Gizmos Enable the checkbox to show all visualization using editor gizmos. Show Yielding Phase Enable the checkbox to show editor gizmos that visualize <code>Yielding Phase</code> of NPCs. Show Obstacle Checking Enable the checkbox to show editor gizmos that visualize <code>Obstacle Checking</code> phase of NPCs. Show Spawn Points Enable the checkbox to show editor gizmos that visualize <code>Spawn Points</code> where NPCs is generated."},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#random-traffic-sims","title":"Random Traffic Sims","text":"Parameter Description Enable Simulation Enable the checkbox to <code>Random Traffic Sims</code> which spawn NPC vehicles randomly. TrafficSim Npc Vehicle Prefabs Prefabs representing controlled vehicles.They must have <code>NPCVehicle</code> component attached. Spawnable TrafficLanes <code>TrafficLane</code> components where NPC vehicles can be spawned during traffic simulation. Enable Spawn Count Limit Enable the checkbox to limit of vehicle spawning. Spawn Count Limit The number of limit of vehicles spawning."},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#gizmos","title":"Gizmos","text":"<p>Gizmos are useful for checking current behavior of NPCs and its causes. Gizmos have a high computational load so please disable them if the simulation is laggy.</p> <p>The visualizable elements are listed in the following table:</p> Shape Description Rectangle <code>Yielding Phase</code> of each NPCs to avoid colliding with the other NPCs. Arrow <code>Obstacle Checking</code> of each NPCs to stop in front of the obstacle. Diamond <code>Spawn Points</code> where NPCs is generated by <code>Random Traffic Sims</code>. <p></p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#instruction","title":"Instruction","text":"<p>To use <code>Traffic Simulation</code>, please follow the steps below.</p> <p>For the preparation, the following must be prepared:</p> <ul> <li>3D map (.fbx)</li> <li>lanelet map (.osm)</li> </ul> <p>Info</p> <p>AWSIM includes <code>AutowareSimulationDemo</code> scene. Please refer to: * <code>Assets/Awsim/Scenes/AutowareSimulationDemo.unity</code></p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#1-place-traffic-simulator","title":"1. Place Traffic Simulator","text":"<p>Please create <code>TrafficSimulator</code> component as the following:</p> <ol> <li>Create empty <code>GameObject</code> (should be named <code>TrafficSimulator</code>).</li> <li>Attach this object to <code>TrafficSimulator</code> component.</li> <li>(optional) To place objects which is generated later, you may create empty objects named <code>TrafficIntersections</code> and <code>NPCPedestrians</code>.</li> </ol> <p></p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#2-trafficintersection-and-lanelettrafficlight-settings","title":"2. TrafficIntersection and LaneletTrafficLight settings","text":"<p>Please place intersection objects and attach <code>LaneletTrafficLight</code> script. Then, please you set traffic lights to intersection.</p> <p></p> <p>Please configure <code>TrafficIntersection</code> and <code>LaneletTrafficLight</code> components as the following:</p> <ol> <li>Add a empty <code>GameObject</code> as a child object of <code>TrafficIntersections</code> hierarchy<ol> <li>The <code>GameObject</code> should be named <code>TrafficIntersection.x</code></li> <li>The <code>Transform</code> of <code>GameObject</code> should be set on the target intersection</li> </ol> </li> <li>Attach a <code>TrafficIntersection</code> component to the intersection game object</li> <li>Attach <code>LaneletTrafficLight</code> to traffic light objects placed on the target intersection </li> <li>Modify <code>Bulb Material Config</code> as follow images vehicle traffic light  pedestrian traffic light <ol> <li>If there are wrong order of bulb, modify each <code>Bulb Material Config</code></li> </ol> </li> <li>Set traffic light objects attached <code>LaneletTrafficLight</code> in step. 3 to <code>TrafficLightGroups</code> in <code>TrafficIntersection</code><ol> <li>Traffic lights which should light same sequences should be set on same <code>TrafficLightGroups</code></li> </ol> </li> </ol> <p>Warning</p> <p>Do not attach <code>LaneletTrafficLight</code> to traffic lights which are not set to <code>TrafficIntersection</code>. It causes errors.</p> <p>Info</p> <p>For detailed settings of <code>Bulb Material Config</code>, see here.</p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#modify-lighting-sequences","title":"Modify <code>Lighting Sequences</code>","text":"<p>If you need to set an arbitrary signal control pattern, you can modify it in <code>Lighting Sequences</code> field.</p> <p>Create any number of elements of <code>Lighting Sequences</code> and set parameters for each one. When the scene plays, the <code>Lighting Sequences</code> will execute sequentially from <code>Element 0</code>. In addition, when the last element completes, the sequence will loop back to <code>Element 0</code>.</p> <p></p> <p>The <code>Waypoint settings</code> parameters are listed in the following table:</p> <p>Lighting Sequences</p> Parameter Description Interval Sec Duration for which this sequence continues. Group Lighting Orders Settings for lighting each <code>TrafficLightGroups</code>. <p>Group Lighting Orders</p> Parameter Description Group Target <code>TrafficLightGroups</code>. Bulb Data Setting for lighting each bulb in traffic lights within <code>TrafficLightGroups</code>. <p>Bulb Data</p> Parameter Description Type Target bulb. Color Color of lighting on target bulb. Status Type of lighting. (Solid On, Solid Off and Flashing)"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#set-right-of-ways-on-uncontrolled-intersections","title":"Set right of ways on uncontrolled intersections","text":"<p>On intersections without traffic lights, it is needed to set the right of way of TrafficLane manually for the vehicles to operate properly.</p> <p>Please configure <code>TrafficLane</code> components as the following:</p> <ol> <li>Select a straight lane that should be right of way in the intersection <ol> <li>The selected lane should be highlighted</li> </ol> </li> <li>Click the <code>Set RightOfWays</code> button to give the lane priority over other lanes </li> </ol> <p>Please check if all lanes that intersect with the selected lane are highlighted yellow. This means that the right of way was applied correctly.</p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#3-load-lanelet","title":"3. Load lanelet","text":"<p><code>LaneletLoader</code> can load a lanelet map and create <code>TrafficLane</code> and <code>StopLine</code>. In addition, <code>LaneletLoader</code> set parameter of traffic rules to <code>TrafficLane</code>, <code>StopLine</code> and traffic lights. <code>LaneletLoader</code> can be performed by opening <code>AWSIM -&gt; Common -&gt; Load Lanelet</code> at the toolbar of Unity Editor.</p> <p></p> <p>Please use <code>LaneletLoader</code> as the following:</p> <ol> <li>Fill in <code>Osm</code> field with a lanelet map (<code>.osm</code>) you prepared, <code>Root Object</code> field with a <code>TrafficSimulator</code> object.</li> <li>Adjust <code>Waypoint settings</code> parameters for the loading process if needed.</li> <li>To load the lanelet map, please click <code>Load</code> button.</li> </ol> <p></p> <p>The <code>Waypoint settings</code> parameters are listed in the following table:</p> Parameter Description Resolution Resolution of resampling. Lower values provide better accuracy at the cost of processing time. Min Delta Length Minimum length(m) between adjacent points. Min Delta Angle Minimum angle(deg) between adjacent edges.Lowering this value produces a smoother curve. <p><code>TrafficLane</code>, <code>StopLine</code> and <code>TrafficLight</code> will be generated and placed as child objects of the <code>Root Object</code>. You can check their visual representation by clicking consecutive elements in the scene hierarchy.</p> <p></p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#4-trafficsimulator-setting","title":"4. TrafficSimulator setting","text":"<p>Please configure <code>TrafficSimulator</code> component as the following:</p> <ol> <li>Fill in <code>Ego Vehicle</code> field with EGO vehicle<ol> <li>Example: <code>EgoVehicle/Lexus RX450h 2015</code></li> </ol> </li> <li>Change <code>Obstacle Layer Mask</code> and <code>Ground Layer Mask</code> field to <code>Everything</code></li> <li>Fill in <code>Traffic Intersections</code> field with <code>TrafficIntersection</code> objects</li> <li>Fill in <code>Random Traffic Sims</code> field<ol> <li>Fill in <code>Traffic Sim Npc Vehicle Prefab</code> field with vehicle prefabs what you want to spawn<ol> <li>Prefabs is in <code>Assets/Awsim/Prefabs/Usecase/TrafficSimulation/</code></li> </ol> </li> <li>Fill in <code>Spawnable Traffic Lanes</code> field with <code>TrafficLane</code> where you want to spawn vehicles</li> </ol> </li> </ol> <p>Info</p> <p>For detailed settings of <code>TrafficSimulator</code>, see here.</p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#5-place-pedestrian-optional","title":"5. Place Pedestrian (optional)","text":"<p>You can place pedestrian NPCs if needed. Pedestrians can animated and walk around where they are placed. Direction which pedestrian start to walking can be set in <code>Transform</code> of it.</p> <p></p> <p>Please configure pedestrian NPCs as the following:</p> <ol> <li>Place pedestrian prefabs on a scene<ol> <li>Prefabs is in <code>Assets/Awsim/Prefabs/Entity/Npc/Pedestrian/</code></li> <li>Pedestrians should be child object of <code>NPCPedestrians</code> hierarchy</li> </ol> </li> <li>Attach <code>SimplePedestrianWalkerController</code> component to pedestrians</li> <li>(optional) Configure parameters of <code>SimplePedestrianWalkerController</code></li> </ol> <p>The parameters of <code>SimplePedestrianWalkerController</code> are listed in the following table:</p> Parameter Description Duration Duration at which the pedestrian walk. Speed Speed at which the pedestian walk."},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#6-call-methods-of-trafficsimulator","title":"6. Call methods of <code>TrafficSimulator</code>","text":"<p>To enable <code>Traffic Simulation</code>, some methods of <code>TrafficSimulator</code> should be called from callback of <code>MonoBehaviour</code>.</p> <ol> <li>Create or open class which is inherit <code>MonoBehaviour</code></li> <li>Make field of <code>TrafficSimulator</code></li> <li>Add description of calling method of <code>TrafficSimulator</code></li> </ol> <p>The method should be called are listed in the following table:</p> Method Description Initialize() Should be called Start() callback. OnUpdate() Should be called Update() callback. OnFixedUpdate() Should be called FixedUpdate() callback. <p>Info</p> <p>AWSIM includes <code>AutowareSimulationDemo</code> scene. Please refer to: * <code>Assets/Awsim/Scenes/AutowareSimulationDemo/AutowareSimulationDemo.cs</code> * <code>Assets/Awsim/Scenes/AutowareSimulationDemo.unity</code> scene</p>"},{"location":"DeveloperGuide/Layer/Usecase/TrafficSimulation/#call-methods-of-pedestrian-optional","title":"Call methods of Pedestrian (optional)","text":"<p>To move Pedestrian, some methods of <code>SimplePedestrianWalkerController</code> should be called same as <code>TrafficSimulator</code>.</p> <ol> <li>Create or open class which is inherit <code>MonoBehaviour</code></li> <li>Make field of <code>SimplePedestrianWalkerController[]</code></li> <li>Add description of calling method of each element of <code>SimplePedestrianWalkerController[]</code> using for loop</li> </ol> <p>The method should be called are listed in the following table:</p> Method Description Initialize() Should be called Start() callback. OnUpdate() Should be called Update() callback. OnFixedUpdate() Should be called FixedUpdate() callback."},{"location":"DeveloperGuide/Prerequisites/","title":"Prerequisites","text":"<p>Welcome to AWSIM developer guide! Some prerequisite knowledge is required to read the AWSIM Developer Guide. Please refer to them as needed.</p> <ul> <li>Ubuntu</li> <li>Unity</li> <li>C#</li> <li>ROS2</li> <li>Autoware</li> </ul>"},{"location":"DeveloperGuide/SetupUnityProject/","title":"Setup unity project","text":"<p>Info</p> <p>It is advised to checkout the Quick Start Demo tutorial before reading this section.</p>"},{"location":"DeveloperGuide/SetupUnityProject/#1-environment-preparation","title":"1. Environment preparation","text":"<p>Ubuntu OS is required.</p> <ol> <li>Make sure your machine meets the required hardware specifications.<ul> <li>NOTE: PC requirements may vary depending on simulation contents which may change as the simulator develops</li> </ul> </li> <li>Prepare a desktop PC with Ubuntu 22.04 installed.</li> <li> <p>Install nvidia gpu driver (Skip if already installed).</p> <ol> <li>Add nvidia driver to apt repository. <pre><code>sudo add-apt-repository ppa:graphics-drivers/ppa &amp;&amp;\nsudo apt update\n</code></pre></li> <li> <p>Install the recommended version of the driver. <pre><code>sudo ubuntu-drivers autoinstall\n</code></pre></p> <p>Info</p> <p>Version 570 or higher is recommended.</p> </li> <li> <p>Reboot your machine to make the installed driver detected by the system. <pre><code>sudo reboot\n</code></pre></p> </li> <li> <p>Open terminal and check if nvidia-smi command is available and outputs summary similar to the one presented below. <pre><code>nvidia-smi \n</code></pre> Check result. <pre><code>Fri May  2 18:55:24 2025       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 570.124.06             Driver Version: 570.124.06     CUDA Version: 12.8     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  NVIDIA GeForce RTX 4090        Off |   00000000:01:00.0  On |                  Off |\n|  0%   45C    P8             25W /  450W |    5920MiB /  24564MiB |      7%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n</code></pre></p> </li> </ol> </li> <li> <p>Install vulkan graphics library (Skip if already installed).</p> <ol> <li>Update the environment. <pre><code>sudo apt update\n</code></pre></li> <li>Install the library. <pre><code>sudo apt install libvulkan1\n</code></pre></li> </ol> </li> <li> <p>Install git (Skip if already installed).</p> </li> <li>Set the ROS 2 middleware and the localhost only mode as described in the official Autoware documentation: Autoware Documentation \u2013 DDS settings for ROS 2 and Autoware</li> <li>Restart PC.</li> </ol> <p>AWSIM comes with a standalone flavor of <code>Ros2ForUnity</code>. This means that, to avoid internal conflicts between different ROS 2 versions, you shouldn't run the Editor or AWSIM binary with ROS 2 sourced.</p> <p>Warning</p> <p>Do not run the AWSIM, Unity Hub, or the Editor with ROS 2 sourced.</p> <ul> <li>Make sure that the terminal which you are using to run Unity Hub, Editor, or AWSIM doesn't have ROS 2sourced.</li> <li>It is common to have ROS 2 sourced automatically with <code>~/.bashrc</code> or <code>~/.profile</code>. Make sure it is not obscuring your working environment:<ul> <li>Running Unity Hub from the Ubuntu GUI menu takes the environment configuration from <code>~/.profile</code>.</li> <li>Running Unity Hub from the terminal uses the current terminal configuration from <code>~/.profile</code> and <code>~/bashrc</code>.</li> <li>Running Unity Editor from the UnityHub inherits the environment setup from the Unity Hub. </li> </ul> </li> </ul>"},{"location":"DeveloperGuide/SetupUnityProject/#2-unity-installation","title":"2. Unity installation","text":"<p>Info</p> <p>AWSIM's Unity version is currently 6000.0.34f1</p> <ol> <li>Install UnityHub.</li> <li>Download Unity 6000.0.34f1 from the download archive.    </li> </ol>"},{"location":"DeveloperGuide/SetupUnityProject/#3-open-awsim-project","title":"3. Open AWSIM project","text":"<ol> <li> <p>Git clone AWSIM repository.     <pre><code>git clone git@github.com:tier4/AWSIM.git\n</code></pre></p> </li> <li> <p>Open AWSIM project.     Open a terminal and launch Unity Editor with the following command (adjust the path if necessary): <pre><code>~/Unity/Hub/Editor/6000.0.34f1/Editor/Unity -projectPath \"/home/user/AWSIM/\"\n</code></pre>     This ensures that the environment variables set in <code>~/.bashrc</code> are applied correctly.</p> <p>Info</p> <p>If you launch Unity Hub directly from the Ubuntu applications menu (without using the terminal), the environment variables from <code>~/.bashrc</code> will not be applied, and AWSIM may not work correctly. Always start Unity from the terminal as shown above.</p> <p>Alternatively, you can permanently fix this by wrapping the Unity binary with a small script. Run the following commands (adjust the Unity version and paths as necessary):</p> <pre><code>cd ~/Unity/Hub/Editor/6000.0.34f1/Editor/\nmv Unity Unity.bin\n\ntee Unity &gt;/dev/null &lt;&lt;'SH'\n#!/usr/bin/env bash\nexport RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\nexport CYCLONEDDS_URI=file:///home/user/cyclonedds.xml\nexec \"$(dirname \"$0\")/Unity.bin\" \"$@\"\nSH\nchmod +x Unity\n</code></pre> <p>With this change, Unity will always start with the required environment variables, even when launched from Unity Hub.</p> <p>Warning</p> <p>If you get the safe mode dialog when starting UnityEditor, you may need to install openssl.</p> <ol> <li>download libssl <code>$ wget http://security.ubuntu.com/ubuntu/pool/main/o/openssl1.0/libssl1.0.0_1.0.2n-1ubuntu5.13_amd64.deb</code></li> <li>install <code>sudo dpkg -i libssl1.0.0_1.0.2n-1ubuntu5.13_amd64.deb</code></li> </ol> </li> </ol>"},{"location":"DeveloperGuide/SetupUnityProject/#4-import-external-packages","title":"4. Import external packages","text":"<ol> <li> <p>Download <code>Shinjuku.unitypackage</code></p> <p>Download Shinjuku.unitypackage</p> </li> <li> <p>In Unity Editor, from the menu bar at the top, select <code>Assets -&gt; Import Package -&gt; Custom Package...</code> and navigate the <code>Shinjuku.unitypackage</code> file.</p> </li> <li> <p><code>Shinjuku.unitypackage</code> package has been successfully imported under <code>Assets\\AWSIM\\Externals</code> directory.</p> <p>Info</p> <p>The <code>Externals</code> directory is added to the <code>.gitignore</code> because the map has a large file size and should not be directly uploaded to the repository.</p> </li> </ol>"},{"location":"DeveloperGuide/SetupUnityProject/#5-run-the-demo-in-editor","title":"5. Run the demo in Editor","text":"<p>The following steps describe how to run the demo in Unity Editor:</p> <ol> <li>Open the <code>AutowareSimulationDemo.unity</code> scene placed under <code>Assets/AWSIM/Scenes/</code> directory.</li> <li>Run the simulation by clicking <code>Play</code> button placed at the top section of Edtior.     </li> </ol>"},{"location":"DeveloperGuide/SetupVscode/","title":"Setup vscode","text":""},{"location":"DeveloperGuide/SetupVscode/#install-visual-studio-code","title":"Install Visual Studio Code","text":"<p>Follow the steps in: https://code.visualstudio.com/docs/setup/linux</p> <pre><code># Install the keys and repository\nsudo apt-get install wget gpg\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg\nsudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg\nsudo sh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" &gt; /etc/apt/sources.list.d/vscode.list'\nrm -f packages.microsoft.gpg\n\n# Then update the package cache and install the package using:\nsudo apt install apt-transport-https\nsudo apt update\nsudo apt install code\n</code></pre>"},{"location":"DeveloperGuide/SetupVscode/#install-the-dotnet-sdk","title":"Install the Dotnet SDK","text":"<p>Follow the steps in: https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu#register-the-microsoft-package-repository</p> <pre><code># Get Ubuntu version\ndeclare repo_version=$(if command -v lsb_release &amp;&gt; /dev/null; then lsb_release -r -s; else grep -oP '(?&lt;=^VERSION_ID=).+' /etc/os-release | tr -d '\"'; fi)\n\n# Download Microsoft signing key and repository\nwget https://packages.microsoft.com/config/ubuntu/$repo_version/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\n\n# Install Microsoft signing key and repository\nsudo dpkg -i packages-microsoft-prod.deb\n\n# Clean up\nrm packages-microsoft-prod.deb\n\n# Update packages\nsudo apt update\n\nsudo apt install dotnet-sdk-8.0\n</code></pre>"},{"location":"DeveloperGuide/SetupVscode/#install-the-extensions","title":"Install the extensions","text":"<p>Follow the steps in:</p> <ul> <li>https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csdevkit</li> <li>https://marketplace.visualstudio.com/items?itemName=VisualStudioToolsForUnity.vstuc</li> <li>https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp</li> </ul> <p>Launch VS Code Quick Open (Ctrl+P), paste the following command, and press enter.   - <code>ext install ms-dotnettools.csdevkit</code>    Repeat for:   - <code>ext install VisualStudioToolsForUnity.vstuc</code>   - <code>ext install ms-dotnettools.csharp</code> </p>"},{"location":"DeveloperGuide/SetupVscode/#configure-the-unity","title":"Configure the Unity","text":"<ul> <li>Open up the Unity Editor</li> <li><code>Edit</code> -&gt; <code>Preferences</code> -&gt; <code>External Tools</code> -&gt; <code>External Script Editor</code></li> <li>Select <code>Visual Studio Code</code></li> <li>If it's not there, click <code>Browse</code> and navigate and select <code>/usr/bin/code</code></li> </ul> <p>It should all be configured now. You can either open up a script by double clicking in the Project window in Unity or by opening up the project in VS Code: - <code>Assets</code> -&gt; <code>Open C# Project</code></p> <p>Syntax highlighting and CTRL-click navigation should work out of the box.</p> <p>For more advanced features such as debugging, check the Unity Development with VS Code Documentation.</p>"},{"location":"DeveloperGuide/SetupVscode/#additional-notes","title":"Additional notes","text":"<p>In the AWSIM project, the package Visual Studio Editor is already installed to satisfy the requirement from the Unity for Visual Studio Code extension.</p>"},{"location":"DeveloperGuide/SwitchSrp/","title":"Switch SRP","text":""},{"location":"DeveloperGuide/SwitchSrp/#whats-srp","title":"What's SRP?","text":"<p>SRP (Scriptable Render Pipeline) is a programmable rendering architecture provided by Unity that allows developers to customize rendering behavior based on project requirements. Unity officially offers two main SRP implementations:</p> <ul> <li>URP (Universal Render Pipeline): Optimized for cross-platform performance, suitable for most projects.</li> <li>HDRP (High Definition Render Pipeline): Prioritizes high visual fidelity, ideal for high-end platforms and photorealistic projects.</li> </ul>"},{"location":"DeveloperGuide/SwitchSrp/#switch-srp-use-editor-extension","title":"Switch SRP (Use editor extension)","text":"<p>To simplify the SRP switching process, we provide an Editor extension named \"Switch SRP\", available in the Unity Editor menu.</p> <ul> <li> <p>This tool automates the following steps:</p> <ul> <li> <p>Switching the default render pipeline asset (Graphics settings)</p> </li> <li> <p>Updating scripting define symbols (Player settings)</p> </li> <li> <p>Prompting for Unity Editor restart to avoid rendering glitches</p> </li> </ul> </li> <li> <p>In the Unity Editor, go to AWSIM -&gt; Switch SRP from the top menu. </p> </li> <li> <p>A window will appear, showing the currently active render pipeline. </p> </li> <li> <p>Based on the current state, the button will display one of the following:</p> <ul> <li>If the current pipeline is HDRP, the button will say HDRP \u2192 URP<ul> <li>Click to switch to URP.</li> </ul> </li> <li>If the current pipeline is URP, the button will say URP \u2192 HDRP<ul> <li>Click to switch to HDRP.  </li> </ul> </li> </ul> </li> <li> <p>After clicking the button, a confirmation dialog will appear asking whether to restart the Unity Editor immediately. </p> </li> <li> <p>Click Yes, and Unity will automatically restart to ensure the changes take effect and to prevent rendering issues.  </p> </li> </ul>"},{"location":"DeveloperGuide/SwitchSrp/#switch-srp-manually","title":"Switch SRP (Manually)","text":"<p>In this project, both HDRP and URP scenes are preconfigured separately.</p> URP to HDRPHDRP to URP <ol> <li> <p>Open the Unity Editor and go to Edit &gt; Project Settings &gt; Graphics </p> </li> <li> <p>Switch the <code>Default Render Pipeline</code> in Edit -&gt; ProjectSettings -&gt; Graphics, and set it to <code>HDRenderPipelineAsset</code>. </p> </li> <li> <p>Open the AutowareSimulationDemo scene. </p> </li> <li> <p>Add Scripting Define Symbols After switching the render pipeline, you need to update the scripting define symbol from URP to HDRP to enable HDRP-specific conditional compilation.  </p> <ul> <li> <p>In the Unity Editor, go to Edit -&gt; Project Settings -&gt; Player</p> </li> <li> <p>In the right panel, expand Other Settings</p> </li> <li> <p>Find the Scripting Define Symbols field under the Script Compilation section</p> </li> <li> <p>Remove URP and add HDRP </p> </li> </ul> </li> <li> <p>Restart the Unity Editor after switching the render pipeline.</p> <ul> <li>Especially when switching from URP to HDRP, the following error may occur: <pre><code>Exception: Invalid import, you are importing a texture handle that wraps a RenderTargetIdentifier. The render graph can't know the properties of these textures so please use the ImportTexture overload that takes a RenderTargetInfo argument instead.\n</code></pre></li> <li> <p>This is caused by leftover SRP cache and materials not being refreshed.</p> </li> <li> <p>Scene materials may appear broken (e.g., white), even without error logs when switching from HDRP to URP.</p> </li> <li> <p>Restarting Unity Editor helps avoid unknown issues and ensures proper scene rendering.</p> </li> </ul> </li> </ol> <ol> <li> <p>Open the Unity Editor and go to Edit &gt; Project Settings &gt; Graphics </p> </li> <li> <p>Switch the <code>Default Render Pipeline</code> in Edit -&gt; ProjectSettings -&gt; Graphics, and set it to <code>UniversalRenderPipelineAsset</code>. </p> </li> <li> <p>Open the AutowareSimulationURPDemo scene. </p> </li> <li> <p>Add Scripting Define Symbols After switching the render pipeline, you need to switch the scripting define symbol from HDRP to URP to enable URP-specific conditional compilation.  </p> <ul> <li> <p>In the Unity Editor, go to Edit -&gt; Project Settings -&gt; Player</p> </li> <li> <p>In the right panel, expand Other Settings</p> </li> <li> <p>Find the Scripting Define Symbols field under the Script Compilation section</p> </li> <li> <p>Remove HDRP and add URP </p> </li> </ul> </li> <li> <p>Restart the Unity Editor after switching the render pipeline.</p> <ul> <li>Especially when switching from URP to HDRP, the following error may occur: <pre><code>Exception: Invalid import, you are importing a texture handle that wraps a RenderTargetIdentifier. The render graph can't know the properties of these textures so please use the ImportTexture overload that takes a RenderTargetInfo argument instead.\n</code></pre></li> <li> <p>This is caused by leftover SRP cache and materials not being refreshed.</p> </li> <li> <p>Scene materials may appear broken (e.g., white), even without error logs when switching from HDRP to URP.</p> </li> <li> <p>Restarting Unity Editor helps avoid unknown issues and ensures proper scene rendering.</p> </li> </ul> </li> <li> <p>Check the lighting configuration: </p> </li> </ol>"},{"location":"DeveloperGuide/TroubleShooting/","title":"Trouble shooting","text":"Trouble Solution Massive output of Plugins errors <code>git clone</code> the AWSIM repository again Error : <code>RuntimeError: error not set, at C:\\ci\\ws\\src\\ros2\\rcl\\rcl\\src\\rcl\\node.c:262</code> Set up environment variables and config around ROS2 correctly. For example: - Environment variables - <code>cyclonedds_config.xml</code> <code>$ ros2 topic list</code> is not displayed - your machine <code>ROS_DOMAIN_ID</code> is different- ROS2 is not sourced Using AWSIM on Windows and Autoware on Ubuntu.  <code>$ ros2 topic list</code> is not displayed. Allow the communication in Windows Firewall Self-driving stops in the middle of the road. Check if your map data is correct (PointCloud, VectorMap, 3D fbx models) Connecting AWSIM and Autoware results in bad network Make ros local host-only. Include the following in the .bashrc (The password will be requested at terminal startup after OS startup.)  <code>export ROS_LOCALHOST_ONLY=1</code><code>export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp</code><code>if [ ! -e /tmp/cycloneDDS_configured ]; then</code><code>sudo sysctl -w net.core.rmem_max=2147483647</code><code>sudo ip link set lo multicast on</code><code>touch /tmp/cycloneDDS_configured</code><code>fi</code> Lidar (colored pointcloud on RViz ) does not show. Reduce processing load by following command. This can only be applied to Autoware's <code>awsim-stable</code> branch.  <code>cd &lt;path_to_your_autoware_folder&gt;</code><code>wget \"https://drive.google.com/uc?export=download&amp;id=11mkwfg-OaXIp3Z5c3R58Pob3butKwE1Z\" -O patch.sh</code><code>bash patch.sh &amp;&amp; rm patch.sh</code> Error when starting AWSIM binary. <code>segmentation fault (core dumped)</code> - Check if yourNvidia drivers or Vulkan API are installed correctly - When building binary please pay attantion whether the <code>Graphic Jobs</code> option in <code>Player Settings</code> is disabled. It should be disabled since it may produce segmentation fault errors. Please check forum for more details. Unity crashes and check the log for the cause of the error. Editor log file locationWindows : <code>C:\\Users\\username\\AppData\\Local\\Unity\\Editor\\Editor.log</code>Linux : <code>~/.config/unity3d/.Editor.log</code> Player log file location Windows : <code>C:\\Users\\username\\AppData\\LocalLow\\CompanyName\\ProductName\\output_log.txt</code>Linux :<code>~/.config/unity3d/CompanyName/ProductName/Player.log</code>See also : Unity Documentation - Log Files Safe mode dialog appears when starting UnityEditor.  or  error : <code>No usable version of libssl was found</code> 1. download libssl  <code>$ wget http://security.ubuntu.com/ubuntu/pool/main/o/openssl1.0/libssl1.0.0_1.0.2n-1ubuntu5.13_amd64.deb</code>  2. install  <code>sudo dpkg -i libssl1.0.0_1.0.2n-1ubuntu5.13_amd64.deb</code> Suport for <code>IL2CPP</code> scripting backend AWSIM is not supported in <code>IL2CPP</code> since <code>ZeroMQ</code> library is not supported in <code>IL2CPP</code>.You can change scripting backend to <code>IL2CPP</code> but AWSIM may not work correctly on <code>IL2CPP</code>."},{"location":"Downloads/","title":"Downloads","text":"Download link Note AWSIM-Demo.zip AWSIM demo simulation (HDRP). Lexus RX450h will be driven autonomously using Autoware under random traffic conditions in Shinjuku. see also here. AWSIM-Demo-Lightweight.zip URP version of <code>AWSIM-Demo</code>. Enables lightweight AWSIM demo simulation. The content is the same as <code>AWSIM-Demo</code>. AWSIM-Demo-OpenSCENARIO.zip Demo simulation using OpenSCENARIO with AWSIM. Connect AWSIM, Autoware, and Scenario Simulator v2.. see also here. Shinjuku.unitypackage <code>.unitypackage</code> for Shinjuku to import into UnityEditor. see also here. Shinjuku-Map.zip Map files used in Autoware. <code>.osm</code> and <code>.pcd</code> files for Shinjuku."},{"location":"GettingStarted/AWSIMConcept/","title":"AWSIM concept","text":"<p> AWSIM is an open-source simulator made with Unity for autonomous driving research and development. It is developed for self-driving software like Autoware. This simulator aims to bridge the gap between the virtual and real worlds, enabling users to train and evaluate their autonomous systems in a safe and controlled environment before deploying them on real vehicles. It provides a realistic virtual environment for training, testing, and evaluating various aspects of autonomous driving systems.</p> <p>AWSIM simulates a variety of real-world scenarios, with accurate physics and sensor models. It offers a wide range of sensors, such as: Cameras, GNSS, IMU and LiDARs, allowing developers to simulate their autonomous vehicle's interactions with the environment accurately. The simulator also models dynamic objects, such as pedestrians, other vehicles, and traffic lights, making it possible to study interactions and decision-making in complex traffic scenarios. This enables the testing and evaluation of perception, planning, and control algorithms under different sensor configurations and scenarios.</p>"},{"location":"GettingStarted/AWSIMConcept/#awsim-features","title":"AWSIM features","text":"<ul> <li>Optimally integrated simulation with Autoware</li> <li>Distribution of demo simulations highly optimized for Autoware</li> <li>ROS2 native communications and environments</li> <li>Use the same ROS2 topics and messages as the actual vehicle</li> <li>Vehicle dynamics optimized for Autoware</li> <li>Support for Autoware's vehicle control mode</li> <li>Support Logitech G29 steering wheels</li> <li>Ray tracing lidar sensor simulation</li> <li>Open CV camera sensor simulation</li> <li>IMU, GNSS sensor simulation</li> <li>Controllable time scale</li> <li>Support V2I development</li> <li>Random traffic simulation. Seed values can also be fixed</li> <li>point cloud generation</li> <li>Switchable between HDRP and URP</li> <li>Focus on customizability through coding</li> <li>Support ASAM OpenSCENARIO (connecting scenario simulator v2)</li> <li>Simple and highly expandable layered architecture</li> <li>Controlling the execution order of C# code independent of Unity's script execution order</li> </ul>"},{"location":"GettingStarted/Advanced/AwsimRvizPlugins/","title":"AwsimRvizPlugins","text":"<p>Feature to operate AWSIM environment from the Rviz plugins.</p> <p></p> <p>The following features are implemented:</p> <ul> <li><code>2D Pose Teleport</code>: Teleport AWSIM EGO pose from Rviz GUI tool</li> <li><code>Npc Spawner</code>: Spawn AWSIM Npc using Rviz GUI tool</li> </ul> <p>Rviz plugins are implemented in the following repositories:</p> <ul> <li>https://github.com/tier4/AwsimRvizPlugins</li> </ul> <p>Info</p> <p>If you want to setup <code>Unity</code> scene with <code>AwsimRvizPlugins</code>, see here.</p>"},{"location":"GettingStarted/Advanced/AwsimRvizPlugins/#installation","title":"Installation","text":""},{"location":"GettingStarted/Advanced/AwsimRvizPlugins/#install-only-this-plugins-to-rviz","title":"Install only this plugins to Rviz","text":"<ol> <li>clone this repository <pre><code>git clone git@github.com:tier4/AwsimRvizPlugins.git\n</code></pre></li> <li>build package <pre><code>cd AwsimRvizPlugins\nsource /opt/ros/humble/setup.bash\ncolcon build\n</code></pre></li> <li>source package You must <code>source</code> each time you launch a terminal. <pre><code>source install/setup.sh\n</code></pre></li> <li>launch Rviz application and use tools <pre><code># rviz2\n# ros2 launch ...\n</code></pre></li> </ol>"},{"location":"GettingStarted/Advanced/AwsimRvizPlugins/#install-with-autoware-pilot-auto","title":"Install with Autoware (pilot-auto)","text":"<ol> <li>clone Autoware repository</li> <li>add description of AwsimRvizPlugins to autoware.repos <pre><code>repositories:\n  # please add the following statement to autoware.repos to use AwsimRvizPlugins\n  simulator/awsim_rviz_plugins:\n    type: git\n    url: git@github.com:tier4/AwsimRvizPlugins.git\n</code></pre></li> <li>Introduce <code>Autoware (pilot-auto)</code> according to Autoware Documentation.</li> </ol>"},{"location":"GettingStarted/Advanced/AwsimRvizPlugins/#2d-pose-teleport","title":"2D Pose Teleport","text":"<p>Teleport AWSIM EGO using Rviz GUI tool. </p>"},{"location":"GettingStarted/Advanced/AwsimRvizPlugins/#how-to-use","title":"How to use","text":"<ol> <li>On Rviz, Click the plus button on the toolbar and select <code>awsim_rviz_plugins/2dPoseTeleport</code> from the list. </li> <li>On Rviz, Click on <code>2D Pose Teleport</code> button from the toolbar and select it.</li> <li>On AWSIM, Play binary or Play scene.</li> <li>On the map displayed in Rviz, drag the cursor to the location and orientation where you want to move the EGO.</li> </ol> <p>If <code>Autoware (pilot-auto)</code> is running with, press the <code>Initialize with GNSS</code> button to perform localilization again.</p>"},{"location":"GettingStarted/Advanced/AwsimRvizPlugins/#nps-spawner","title":"Nps Spawner","text":"<p>Spawn AWSIM Npc using Rviz GUI tool. Type and velocity of spawned Npc is specified from Rviz display.</p> <p></p>"},{"location":"GettingStarted/Advanced/AwsimRvizPlugins/#how-to-use_1","title":"How to use","text":"<ol> <li>On Rviz, Click the plus button on the toolbar and select <code>awsim_rviz_plugins/NpcSpawner</code> from the list. </li> <li>On Rviz, Click on <code>Npc Spawner</code> button from the toolbar and select it.</li> <li>On AWSIM, Play binary or Play scene.</li> <li>On the map displayed in Rviz, drag the cursor to the location and orientation where you want to spawn the Npc.</li> </ol> <p>If you want to change type and velocity of spawned Npc, do the following:</p> <ol> <li>On Rviz, Click the <code>Add</code> button on the <code>Display</code> panel and select <code>awsim_rviz_plugins/NpcSpawnerStatus</code> from the list. </li> <li>On Rviz, Change the value of <code>Npc Type</code> and <code>Velocity [km/h]</code>.</li> </ol>"},{"location":"GettingStarted/Advanced/LogitechG29/","title":"Logitech G29","text":"<p> logitechg.com : Logitech G29 Steering wheel</p>"},{"location":"GettingStarted/Advanced/LogitechG29/#overview","title":"Overview","text":"<p>The <code>AWSIM-demo.x86-64</code> simulation (included in AWSIM-demo.zip) featured in the Quick-start-demo page supports the Logitech G29 Steering wheel. This page explains how to set it up and configure it.</p> <p>The behavior of G29 varies depending on the control mode.</p> <ul> <li>Control mode is <code>AUTONOMOUS</code> :  G29 automatically reflects the vehicle's steering angle.</li> <li>Control mode is <code>MANUAL</code> : User can control the vehicle via G29.</li> </ul>"},{"location":"GettingStarted/Advanced/LogitechG29/#how-to-setup","title":"How to setup","text":"<ol> <li> <p>Connect the Logitech G29 to your PC. (PS3 mode recommended)</p> <p>Warning</p> <p>When connected to a PC, automatic calibration will start and the steering wheel will rotate. Please be careful to avoid injury.</p> </li> <li> <p>Check the device path for G29.</p> <p>Enter <code>evtest</code> command. <pre><code>evtest\n</code></pre> Result. <pre><code>No device specified, trying to scan all of /dev/input/event*\nNot running as root, no devices may be available.\nAvailable devices:\n/dev/input/event16: input-remapper gamepad\n/dev/input/event22: Logitech G29 Driving Force Racing Wheel\nSelect the device event number [0-22]:\n</code></pre></p> <p>In this case, the device path for G29 is <code>/dev/input/event22</code>.</p> </li> <li> <p>Enter the g29 device path in <code>sample-config.json</code>. Please replace <code>&lt;device path number&gt;</code> as appropriate.</p> <p>Info</p> <p><code>sample-config.json</code> is included in AWSIM-demo.zip.</p> <pre><code>~~\n\"LogitechG29Settings\": {\n    \"_devicePath\": \"/dev/input/event&lt;device path number&gt;\",\n~~\n</code></pre> </li> <li> <p>Launch <code>AWSIM-demo.x86-64</code> with <code>sample-config.json</code> <pre><code>./AWSIM-demo.x86_64 --json_path &lt;direcotry path&gt;/&lt;config json name&gt;.json\n</code></pre></p> </li> <li> <p>Select Logitech G29 from the UI's Vehicle input device.</p> <p> </p> </li> </ol>"},{"location":"GettingStarted/Advanced/LogitechG29/#key-map","title":"Key map","text":"Key Feature Triangle Switch to move drive gear. Square Switch to move reverse gear. Circle Switch to neutral gear. Cross Switch to parking gear. Throttle pedal Forward acceleration. Brake pedal Reverse acceleration. Steering wheel Turning. Left paddle Turn left blinker on. Right paddle Turn right blinker on. R2 Turn on hazard lights. R3 Turn off blinker or hazard lights. L2 Switch control mode <code>AUTONOMOUS</code> to <code>MANUAL</code> L3 Switch control mode <code>MANUAL</code> to <code>AUTONOMOUS</code>"},{"location":"GettingStarted/Advanced/UsingOpenScenario/","title":"UsingOpenScenario","text":"<p>Info</p> <p>If you want to setup <code>Unity</code> scene with <code>Scenario_simulator_v2</code>, see here.</p>"},{"location":"GettingStarted/Advanced/UsingOpenScenario/#overview","title":"Overview","text":"<pre><code>flowchart LR\n    AWSIM &lt;--ROS2--&gt; Autoware\n    AWSIM &lt;--ZeroMQ--&gt; ScenarioSimulator\n    Autoware &lt;--ROS2--&gt; ScenarioSimulator</code></pre>"},{"location":"GettingStarted/Advanced/UsingOpenScenario/#openscenario-demo-simulation-tutorial","title":"OpenSCENARIO demo simulation tutorial","text":""},{"location":"GettingStarted/Advanced/UsingOpenScenario/#1-preparation","title":"1. Preparation","text":"<ol> <li> <p>Operating System  </p> <ul> <li>Ubuntu 22.04 is required.  <ul> <li>Due to the reliance on ROS\u202f2 Humble, which is officially supported only on Ubuntu 22.04 (Jammy).  </li> <li>Using other distributions (such as 20.04 or 24.04) may result in unexpected build or runtime issues due to lack of binary support and untested dependencies.</li> </ul> </li> </ul> </li> <li> <p>Hardware Requirements  </p> <ul> <li>Memory<ul> <li>At least 32 GB of RAM is recommended.</li> <li>If your system has less than 32 GB, consider the following options to avoid out-of-memory (OOM) errors during the build:<ul> <li>Enable swap space (at least 16 GB recommended).</li> <li>Reduce the number of parallel jobs by adding <code>MAKEFLAGS=\"-j1\"</code> or <code>--parallel-workers 1</code> when building with colcon.</li> </ul> </li> </ul> </li> <li>GPU<ul> <li>It is recommended to use an NVIDIA GPU with 8 GB of VRAM or more.  </li> <li>This is important for running AWSIM smoothly and ensuring proper performance of Autoware's perception modules.</li> </ul> </li> </ul> </li> <li> <p>Basic Package Setup  </p> <ul> <li>Before proceeding, make sure the package index is up-to-date and that essential tools like git are installed:  </li> </ul> <p><pre><code>sudo apt -y update\nsudo apt -y install git \n</code></pre> - git is required for cloning repositories such as Autoware, AWSIM.</p> </li> <li> <p>Unity Installation     AWSIM runs on the Unity engine, so you need to install Unity Hub and the required Unity Editor version.</p> <ul> <li> <p>Install Unity Hub     Follow the official guide to install Unity Hub on your platform:     https://docs.unity3d.com/hub/manual/InstallHub.html#install-hub-linux</p> </li> <li> <p>Install Unity Editor    Use Unity Hub to install the following version of Unity:</p> </li> <li>Unity 6000.0.34f1</li> </ul> </li> <li> <p>To improve the performance and stability of DDS-based communication, it's recommended to apply the following optimizations.</p> <ul> <li>Set the system optimizations by adding this code to the very bottom of your ~/.bashrc file: <pre><code>if [ ! -e /tmp/cycloneDDS_configured ]; then\n    sudo sysctl -w net.core.rmem_max=2147483647\n    sudo ip link set lo multicast on\n    touch /tmp/cycloneDDS_configured\nfi\n</code></pre></li> <li>After editing, apply the changes: <pre><code>source ~/.bashrc\n</code></pre></li> </ul> </li> </ol>"},{"location":"GettingStarted/Advanced/UsingOpenScenario/#2-install-autoware-with-scenario-simulator-v2","title":"2. Install Autoware with Scenario simulator v2","text":"<ol> <li> <p>Clone Autoware and move to the directory.     <pre><code>git clone https://github.com/autowarefoundation/autoware.git &amp;&amp;\ncd autoware\n</code></pre></p> </li> <li> <p>Configure the environment.     <pre><code>./setup-dev-env.sh\n</code></pre>     When you run this script, it will prompt several questions. The recommended answers are:</p> <ul> <li> <p><code>Are you sure you want to run setup? [y/N]</code> \u2192 y</p> <ul> <li>This starts the environment setup process.</li> </ul> </li> <li> <p><code>Install NVIDIA libraries? [y/N]</code> \u2192 y </p> <ul> <li>This installs GPU driver, CUDA, cuDNN, TensorRT.  </li> <li>You may choose n if you prefer to install them manually or already have them installed.</li> </ul> </li> <li> <p><code>Download artifacts? [y/N]</code> \u2192 y</p> <ul> <li>Downloads prebuilt artifacts.</li> </ul> </li> </ul> </li> <li> <p>Confirm the version in <code>simulator.repos</code>. Before importing repositories, check if the version specified in <code>simulator.repos</code> is the latest. If it's outdated, update it to the latest stable release to avoid compatibility issues. At the time of writing, the latest version is <code>16.6.1</code>. <code>simulator.repos</code>:     <pre><code>repositories:\n    simulator/scenario_simulator:\n        type: git\n        url: https://github.com/tier4/scenario_simulator_v2.git\n        version: 16.6.1\n</code></pre></p> </li> <li> <p>Create the <code>src</code> directory and clone external dependent repositories into it.     <pre><code>mkdir src &amp;&amp;\nvcs import src &lt; autoware.repos &amp;&amp;\nvcs import src &lt; simulator.repos\n</code></pre></p> </li> <li> <p>Download shinjuku_map.zip</p> </li> <li> <p>Unzip it to <code>src/simulator</code> directory.     <pre><code>unzip &lt;Download directory&gt;/shinjuku_map.zip -d src/simulator.\n</code></pre></p> </li> <li> <p>Install dependent ROS packages.     <pre><code>source /opt/ros/humble/setup.bash &amp;&amp;\nrosdep update &amp;&amp;\nrosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO\n</code></pre></p> </li> <li> <p>Build the workspace.     <pre><code>colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-w\"\n</code></pre></p> </li> </ol>"},{"location":"GettingStarted/Advanced/UsingOpenScenario/#3-running-the-demo","title":"3. Running the demo.","text":"<ol> <li> <p>Use Unity Hub to open the AWSIM2.0 project.</p> </li> <li> <p>Open the <code>IntegrateScenarioSimulatorDemo</code> scene.</p> <ul> <li> <p>In the Project window, open the following scene:  </p> <ul> <li><code>Assets/Scenes/ScenarioSimulatorDemo/IntegrateScenarioSimulatorDemo.unity</code></li> </ul> </li> <li> <p>This scene contains the ScenarioSimulatorClient setup for connecting to ScenarioSimulatorV2.</p> </li> </ul> </li> <li> <p>Run AWSIM2.0.</p> <ul> <li>Click the Play button at the top of the Unity Editor to start the simulation.  </li> </ul> </li> <li> <p>Launch <code>scenario_test_runner</code>.</p> <pre><code>source install/setup.bash\nros2 launch scenario_test_runner scenario_test_runner.launch.py                        \\\narchitecture_type:=awf/universe/20250130  record:=false                                         \\\nscenario:='$(find-pkg-share scenario_test_runner)/scenario/sample_awsim.yaml'          \\\nsensor_model:=awsim_sensor_kit  vehicle_model:=sample_vehicle                          \\\nlaunch_simple_sensor_simulator:=false autoware_launch_file:=\"e2e_simulator.launch.xml\" \\\ninitialize_duration:=260 port:=8080\n</code></pre> </li> </ol>"},{"location":"GettingStarted/DemoDetails/","title":"Demo details","text":"<p>Detail of the Quick start demo <code>AWSIM-demo.x86_64</code> simulation.</p>"},{"location":"GettingStarted/DemoDetails/#overview","title":"Overview","text":"<p>AWSIM simulates sensors, vehicles, driving environments, and traffic instead of reality. AWSIM and Autoware are connected by ROS2 only. Each message that is also used in real vehicles is used. Therefore, Autoware can operate without being aware of whether it is a real or simulator. </p> <p></p>"},{"location":"GettingStarted/DemoDetails/#ui","title":"UI","text":"UI Feature Camera sensor Preview of traffic light recognition camera sensor output image. Time scale The timescale of the simulation progress time. 0.5 simulates the simulation at 0.5x speed. (Range : 0.0 ~ 1.0) Traffic settings <code>Max vehicle count</code> is aximum number of NPC vehicles present in traffic at the same time. <code>Seed</code> is seed value used in random numbers for random traffic. Follow camera Enable follow camera operation. Control mode Change the control mode of the ego vehicle. When <code>MANUAL</code>, control input from the device is used; when <code>AUTONOMOUS</code>, control input from ROS2 (Autoware) is used. Since the control input override is simulated as in a real vehicle, the control mode switches to <code>MANUAL</code> when the control mode is <code>AUTONOMOUS</code> and an input is made by a device. Vehicle information Information about the vehicle. Vehicle input device Display of the vehicle's active input devices. Can be switched. UI menu bar Show/hide each UI; scaling of UI; resetting of UI"},{"location":"GettingStarted/DemoDetails/#vehicle","title":"Vehicle","text":"<p>This vehicle dynamics model was created for Autoware simulation, and assuming that Autoware has already created a gas pedal map, this vehicle dynamics model uses acceleration as an input value. It has the following features.</p> <ul> <li>Lexus RX450h 2015</li> <li>Longitudinal control by acceleration (\\(\\frac{m}{s^2}\\)).</li> <li>Lateral control by two-wheel model.</li> <li>Compute pose by physics engine.</li> <li>Mass-spring-damper suspension model. </li> <li>Automatic gear.(<code>P</code>, <code>D</code>, <code>R</code>, <code>N</code>)</li> <li>Effect of gradient resistance.</li> <li>Tire animation and signal light effects.</li> <li>Support for <code>Keyboard</code> input and <code>Logitech G29 steering wheel</code></li> <li>First order delay of input.</li> </ul>"},{"location":"GettingStarted/DemoDetails/#device-input","title":"Device input","text":"<ul> <li>Keyboard</li> </ul> <p>Info</p> <p>Keyboard input for throttle and steering instantly switches the control mode from <code>AUTONOMOUS</code> to <code>MANUAL</code>.</p> Key Feature D Switch to move drive gear. R Switch to move reverse gear. N Switch to neutral gear. P Switch to parking gear. Up arrow Forward acceleration. Down arrow Reverse acceleration. Left arrow Left turning. Right arrow right turning. 1 Turn left blinker on. 2 Turn right blinker on. 3 Turn on hazard lights. 4 Turn off blinker or hazard lights. C Switch control mode <code>MANUAL</code> to <code>AUTONOMOUS</code> <ul> <li>Logitech G29 steering wheel</li> </ul> Key Feature Triangle Switch to move drive gear. Square Switch to move reverse gear. Circle Switch to neutral gear. Cross Switch to parking gear. Throttle pedal Forward acceleration. Brake pedal Reverse acceleration. Steering wheel Turning. Left paddle Turn left blinker on. Right paddle Turn right blinker on. R2 Turn on hazard lights. R3 Turn off blinker or hazard lights. L2 Switch control mode <code>AUTONOMOUS</code> to <code>MANUAL</code> L3 Switch control mode <code>MANUAL</code> to <code>AUTONOMOUS</code>"},{"location":"GettingStarted/DemoDetails/#control-mode","title":"Control mode","text":"<p>AWSIM vehicle simulates operations that switch between autonomous driving and manual control. Autoware accepts manual steering and pedal control by the driver during Autonomus Driving. This allows the driver to shift from Autoware's Autonomous driving (<code>AUTONOMOUS</code> control mode) to Driver's Manual driving (<code>MANUAL</code> control mode).</p> <p><pre><code>stateDiagram-v2\n    AUTONOMOUS --&gt; MANUAL : override input\n    MANUAL --&gt; AUTONOMOUS : restart autonomous driving</code></pre>  UI allows checking and switching the current control mode.</p> AUTONOMOUS MANUAL <p>Info</p> <p>Control mode can also be changed from Topic.  <code>ros2 service call input/control_mode_request autoware_vehicle_msgs/srv/ControlModeCommand \"mode: 1\"</code></p> <p>The following modes are supported. - <code>AUTONOMOUS = 1</code> - <code>MANUAL = 4</code></p> <p></p>"},{"location":"GettingStarted/DemoDetails/#sensor","title":"Sensor","text":"<p>Demo simulation has a total of four sensors.</p> <ul> <li>LiDAR sensor</li> <li>Camera sensor</li> <li>IMU sensor</li> <li>GNSS sensor</li> </ul>"},{"location":"GettingStarted/DemoDetails/#lidar-sensor","title":"LiDAR sensor","text":"<p>Lidar sensor is the component that simulates the LiDAR (Light Detection and Ranging) sensor. LiDAR works by emitting laser beams that bounc                e off objects in the environment, and then measuring the time it takes for the reflected beams to return, allowing the sensor to create a 3D map of the surroundings. This data is used for object detection, localization, and mapping.</p> <p>Publish ROS2 topics.</p> Topic Msg Hz <code>/sensing/lidar/top/pointcloud_raw</code> <code>sensor_msgs/PointCloud2</code> 10 <code>/sensing/lidar/top/pointcloud_raw_ex</code> <code>sensor_msgs/PointCloud2</code> 10"},{"location":"GettingStarted/DemoDetails/#camera-sensor","title":"Camera sensor","text":"<p>Camera sensor is a component that simulates an RGB camera. Autonomous vehicles can be equipped with many cameras used for various purposes. In the current version of AWSIM, the camera is used primarily to provide the image to the traffic light recognition module in Autoware.</p> <p>Publish ROS2 topics.</p> Topic Msg Hz <code>/sensing/camera/traffic_light/camera_info</code> <code>sensor_msgs/CameraInfo</code> 10 <code>/sensing/camera/traffic_light/image_raw</code> <code>sensor_msgs/Image</code> 10"},{"location":"GettingStarted/DemoDetails/#imu-sensor","title":"IMU sensor","text":"<p>IMU sensor is a component that simulates an IMU (Inertial Measurement Unit) sensor. Measures acceleration (\\({m}/{s^2}\\)) and angular velocity (\\({rad}/{s}\\)) based on the sensor pose.</p> <p>Publish ROS2 topics.</p> Topic Msg Hz <code>/sensing/imu/tamagawa/imu_raw</code> <code>sensor_msgs/Imu</code> 30"},{"location":"GettingStarted/DemoDetails/#gnss-sensor","title":"GNSS sensor","text":"<p>GNSS sensor is a component which simulates the position of vehicle computed by the Global Navigation Satellite System based on the transformation of the GameObject to which this component is attached. The GNSS sensor outputs the position in the MGRS coordinate system.</p> <p>Publish ROS2 topics.</p> Topic Msg Hz <code>/sensing/gnss/pose</code> <code>geometry_msgs/Pose</code> 1 <code>/sensing/gnss/pose_with_covariance</code> <code>geometry_msgs/PoseWithCovarianceStamped</code> 1 <p></p>"},{"location":"GettingStarted/DemoDetails/#traffic","title":"Traffic","text":"<p>Demo simulation simulates random traffic with NPCs driving according to traffic rules. The Traffic settings UI allows you to change the content of the traffic.</p> <ul> <li>Max vehicle count : Maximum number of NPC vehicles present in traffic at the same time.</li> <li>Seed : Seed value used in random numbers for random traffic.</li> </ul> <p></p>"},{"location":"GettingStarted/DemoDetails/#environment","title":"Environment","text":"<p>Map for the demo simulation is West Shinjuku Tokyo Japan. Road surfaces, lanes, traffic signals, signs, etc. are reproduced as in reality. For performance, the building is simplified. </p> <p></p>"},{"location":"GettingStarted/DemoDetails/#integration-sequence","title":"Integration sequence","text":""},{"location":"GettingStarted/DemoDetails/#initialization","title":"Initialization","text":"<ol> <li>AWSIM: After AWSIM-demo launch, start publishing clock, sensor, and report topics. (1,2,3,4)</li> <li>Autoware: Estimate ego vehicle position from sensor topics. (5)</li> <li>Autoware: Generate routes for autonomous driving. (6)</li> <li>Autoware: Waiting for engage (7)</li> </ol>"},{"location":"GettingStarted/DemoDetails/#autonomous-driving-loop","title":"Autonomous driving loop","text":"<ol> <li>AWSIM: Publish each Clock, Sensor, and Report topic. (8, 9, 10)</li> <li>Autoware: Localization, Perception, Plannning, Control. (11)</li> <li>Autoware: Publish command topic to contol a vehicle (12)</li> <li>AWSIM: Controlling Ego vehicles based on command topics. (13)</li> </ol> <p>Warning</p> <p>Note that this is a simplified sequence diagram. The actual ros2 topic is pub/sub asynchronously.</p> <p><pre><code>sequenceDiagram\n    autonumber\n    participant AWSIM\n    participant Autoware\n    AWSIM-&gt;&gt;AWSIM: After AWSIM-demo launch, start publishing topic\n    par\n        AWSIM-&gt;&gt;Autoware: Clock topic\n        AWSIM-&gt;&gt;Autoware: Sensor topics\n        AWSIM-&gt;&gt;Autoware: Report topics\n    end\n    Autoware-&gt;&gt;Autoware: Estimate ego vehicle position from sensor topics\n    Autoware-&gt;&gt;Autoware: Generate routes for autonomous driving\n    Autoware-&gt;&gt;Autoware: Waiting for engage\n    loop\n        par\n            AWSIM-&gt;&gt;Autoware: Clock topic\n            AWSIM-&gt;&gt;Autoware: Sensor topics\n            AWSIM-&gt;&gt;Autoware: Report topics\n        end\n        Autoware-&gt;&gt;Autoware: Localization, Perception, Plannning, Control\n        Autoware-&gt;&gt;AWSIM: Command topics\n        AWSIM-&gt;&gt;AWSIM: Control ego vehicle\n    end\n    note over Autoware: Goal</code></pre> </p>"},{"location":"GettingStarted/DemoDetails/#json-configuration","title":"Json configuration","text":"<p>It is possible to do some configurations by specifying the json path when starting <code>AWSIM-demo.x86_64</code>.</p> <ul> <li> <p>Sample json.     <pre><code>{\n    \"TimeScale\": 1,\n    \"TimeSourceType\": 0,\n    \"RandomTrafficSeed\": 33,\n    \"MaxVehicleCount\": 10,\n    \"LogitechG29Settings\": {\n        \"_devicePath\": \"/dev/input/event3\",\n        \"_selfAligningTorqueCoeff\": 1.0\n    },\n    \"EgoVehicleSettings\": {\n        \"_maxSteerTireAngleInput\": 35,\n        \"_maxAccelerationInput\": 2,\n        \"_maxDecelerationInput\": 2\n    },\n    \"EgoPose\": {\n        \"Position\": {\n            \"x\": 81381.7265625,\n            \"y\": 49920.1890625,\n            \"z\": 41.57674865722656\n        },\n        \"EulerAngles\": {\n            \"x\": 0.0,\n            \"y\": 0.0,\n            \"z\": 35.0\n        }\n    }\n}\n</code></pre></p> params type feature TimeScale float The timescale of the simulation progress time. 0.5 simulates the simulation at 0.5x speed. (Range : 0.0 ~ 1.0) TimeSourceType int Time source to be used in the simulation. <code>0</code>: Unity<code>1</code>: External<code>2</code>: DotnetSystem<code>3</code>: DotnetSimulation<code>4</code>: Ros2 RandomTrafficSeed int Seed value used in random numbers for random traffic. MaxVehicleCount int Maximum number of NPC vehicles present in traffic at the same time. LogitechG29Settings._devicePath string Device path for Logitech G29 Steering wheel. LogitechG29Settings._selfAligningTorqueCoeff float Self-aligning torque coefficient for g29. (Range : 0.0 ~ 1.0) EgoVehicleSettings._maxSteerTireAngleInput float Maximum steering angle of steerable tires on a vehicle. (degree.) EgoVehicleSettings._maxAccelerationInput float Maximum acceleration of the vehicle. (m/s^s) EgoVehicleSettings._maxDecelerationInput float Maximum deceleration of the vehicle. (m/s^s) No minus sign is needed. EgoPose.Position vector3 Initial position of ego vehicle. EgoPose.EulerAngles vector3 Initial rotation of ego vehicle. </li> <li> <p>Launch command with json path.     <pre><code>./AWSIM-demo.x86_64 --json_path &lt;direcotry path&gt;/&lt;config json name&gt;.json\n</code></pre></p> <p>Info</p> <p>AWSIM-demo.zip contains <code>sample-config.json</code></p> </li> </ul> <p></p>"},{"location":"GettingStarted/DemoDetails/#ros2","title":"ROS2","text":""},{"location":"GettingStarted/DemoDetails/#nodes","title":"Nodes","text":"<p>Two ROS2 nodes are used in AWSIM.</p> <ul> <li><code>AWSIM</code></li> <li><code>RGL</code></li> </ul> <p>AWSIM ros2 pub/sub, with the exception of the pointcloud, will use the <code>AWSIM</code> ros2 node. For performance, the pointcloud topic output from the LiDAR sensor is published from the <code>RGL</code> ros2 node.</p> <p>Info</p> <p>You can check ros2 topic list. (Using a terminal with ros2 sourced) <pre><code>ros2 topic list\n</code></pre></p>"},{"location":"GettingStarted/DemoDetails/#topics","title":"Topics","text":""},{"location":"GettingStarted/DemoDetails/#subscribers","title":"Subscribers","text":"Topic Message type <code>frame_id</code> <code>Hz</code> <code>QoS</code> <code>/control/command/control_cmd</code> <code>autoware_control_msgs/Control</code> - <code>60</code> <ul><li><code>Reliable</code></li><li><code>TransientLocal</code></li><li><code>KeepLast/1</code></li> <code>/control/command/gear_cmd</code> <code>autoware_vehicle_msgs/GearCommand</code> - <code>10</code> <ul><li><code>Reliable</code></li><li><code>TransientLocal</code></li><li><code>KeepLast/1</code></li> <code>/control/command/turn_indicators_cmd</code> <code>autoware_vehicle_msgs/TurnIndicatorsCommand</code> - <code>10</code> <ul><li><code>Reliable</code></li><li><code>TransientLocal</code></li><li><code>KeepLast/1</code></li> <code>/control/command/hazard_lights_cmd</code> <code>autoware_vehicle_msgs/HazardLightsCommand</code> - <code>10</code> <ul><li><code>Reliable</code></li><li><code>TransientLocal</code></li><li><code>KeepLast/1</code></li> <code>/control/command/emergency_cmd</code> <code>tier4_vehicle_msgs/VehicleEmergencyStamped</code> - <code>60</code> <ul><li><code>Reliable</code></li><li><code>TransientLocal</code></li><li><code>KeepLast/1</code></li>"},{"location":"GettingStarted/DemoDetails/#publishers","title":"Publishers","text":"Topic Message type <code>frame_id</code> <code>Hz</code> <code>QoS</code> <code>/clock</code> <code>rosgraph_msgs/Clock</code> - <code>100</code> <ul><li><code>Best effort</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/sensing/camera/traffic_light/camera_info</code> <code>sensor_msgs/C                ameraInfo</code> <code>traffic_light_left_camera/camera_link</code> <code>10</code> <ul><li><code>Best effort</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/sensing/camera/traffic_light/image_raw</code> <code>sensor_msgs/Image</code> <code>traffic_light_left_camera/camera_link</code> <code>10</code> <ul><li><code>Best effort</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/sensing/gnss/pose</code> <code>geometry_msgs/Pose</code> <code>gnss_link</code> <code>1</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/sensing/gnss/pose_with_covariance</code> <code>geometry_msgs/PoseWithCovarianceStamped</code> <code>gnss_link</code> <code>1</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/sensing/imu/tamagawa/imu_raw</code> <code>sensor_msgs/Imu</code> <code>tamagawa/imu_link</code> <code>30</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1000</code></li> <code>/sensing/lidar/top/pointcloud_raw</code> <code>sensor_msgs/PointCloud2</code> <code>sensor_kit_base_link</code> <code>10</code> <ul><li><code>Best effort</code></li><li><code>Volatile</code></li><li><code>Keep last/5</code></li> <code>/sensing/lidar/top/pointcloud_raw_ex</code> <code>sensor_msgs/PointCloud2</code> <code>sensor_kit_base_link</code> <code>10</code> <ul><li><code>Best effort</code></li><li><code>Volatile</code></li><li><code>Keep last/5</code></li> <code>/vehicle/status/velocity_status</code> <code>autoware_vehicle_msgs/VelocityReport</code> <code>base_line</code> <code>30</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/vehicle/status/steering_status</code> <code>autoware_vehicle_msgs/SteeringReport</code> - <code>30</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/vehicle/status/control_mode</code> <code>autoware_vehicle_msgs/ControlModeReport</code> - <code>30</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/vehicle/status/gear_status</code> <code>autoware_vehicle_msgs/GearReport</code> - <code>30</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/vehicle/status/turn_indicators_status</code> <code>autoware_vehicle_msgs/TurnIndicatorsReport</code> - <code>30</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/vehicle/status/hazard_lights_status</code> <code>autoware_vehicle_msgs/HazardLightsReport</code> - <code>30</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li> <code>/awsim/ground_truth/vehicle/pose</code> <code>geometry_msgs/PoseStamped</code> <code>base_link</code> <code>100</code> <ul><li><code>Reliable</code></li><li><code>Volatile</code></li><li><code>Keep last/1</code></li>"},{"location":"GettingStarted/DemoDetails/#service-server","title":"Service server","text":"Service Message type <code>input/control_mode_request</code> <code>autoware_vehicle_msgs/srv/ControlModeCommand</code>"},{"location":"GettingStarted/QuickStartDemo/","title":"Quick start demo","text":"<p>Below you can find instructions on how to setup the self-driving demo of AWSIM simulation controlled by Autoware. The instruction assumes using the Ubuntu OS.</p> <p> AWSIM on the left, Autoware on the right.</p>"},{"location":"GettingStarted/QuickStartDemo/#demo-contents","title":"Demo contents","text":"AWSIM demo contents Vehicle Lexus RX450h 2015 Map Japan tokyo nishi-shinjuku Sensors LiDAR * 1  Camera * 1  GNSS * 1  IMU * 1  Traffic Randomized traffic ROS2 humble"},{"location":"GettingStarted/QuickStartDemo/#1-preparation","title":"1. Preparation","text":"<p>Please make sure that your computer meets the following requirements in order to run the simulation correctly</p> <p>Warning</p> <p>Requires Nvidia RTX graphics card as it uses raytracing.</p> Required PC specs OS Ubuntu 22.04 CPU 6 cores and 12 threads or higher GPU RTX2080Ti or higher Memory 32GB or higher Nvidia driver 570 or higher <p>Localhost settings</p> <p>The simulation requires appropriate network settings in order to communicate correctly between AWSIM and Autoware. Please follow the official Autoware documentation for configuring localhost:</p> <p>Autoware Documentation \u2013 DDS settings for ROS 2 and Autoware</p> <p>Info</p> <p>A system restart is required for these changes to work.</p>"},{"location":"GettingStarted/QuickStartDemo/#2-install-autoware","title":"2. Install Autoware","text":"<ol> <li> <p>Clone Autoware and move to the directory.     <pre><code>git clone https://github.com/autowarefoundation/autoware.git &amp;&amp;\ncd autoware\n</code></pre></p> </li> <li> <p>Use the <code>main</code> branch. Please check current branch.     <pre><code>git branch\n</code></pre> <pre><code>* main\n</code></pre></p> </li> <li>Configure the environment.     <pre><code>./setup-dev-env.sh\n</code></pre></li> <li>Create the <code>src</code> directory and clone external dependent repositories into it.     <pre><code>mkdir src &amp;&amp;\nvcs import src &lt; autoware.repos\n</code></pre></li> <li>Install dependent ROS packages.     <pre><code>source /opt/ros/humble/setup.bash &amp;&amp;\nrosdep update &amp;&amp;\nrosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO\n</code></pre></li> <li>Build the workspace.     <pre><code>colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-w\"\n</code></pre></li> </ol>"},{"location":"GettingStarted/QuickStartDemo/#3-download-awsim-demo","title":"3. Download AWSIM demo","text":"<ol> <li> <p>Install nvidia gpu driver (Skip if already installed).</p> <ol> <li>Add nvidia driver to apt repository. <pre><code>sudo add-apt-repository ppa:graphics-drivers/ppa &amp;&amp;\nsudo apt update\n</code></pre></li> <li> <p>Install the recommended version of the driver. <pre><code>sudo ubuntu-drivers autoinstall\n</code></pre></p> <p>Info</p> <p>Version 570 or higher is recommended.</p> </li> <li> <p>Reboot your machine to make the installed driver detected by the system. <pre><code>sudo reboot\n</code></pre></p> </li> <li> <p>Open terminal and check if nvidia-smi command is available and outputs summary similar to the one presented below. <pre><code>nvidia-smi \n</code></pre> Check result. <pre><code>Fri May  2 18:55:24 2025       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 570.124.06             Driver Version: 570.124.06     CUDA Version: 12.8     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  NVIDIA GeForce RTX 4090        Off |   00000000:01:00.0  On |                  Off |\n|  0%   45C    P8             25W /  450W |    5920MiB /  24564MiB |      7%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n</code></pre></p> </li> </ol> </li> <li> <p>Install vulkan graphics library (Skip if already installed).</p> <ol> <li>Update the environment. <pre><code>sudo apt update\n</code></pre></li> <li>Install the library. <pre><code>sudo apt install libvulkan1\n</code></pre></li> </ol> </li> <li> <p>Download AWSIM demo.</p> <ol> <li> <p>Download <code>AWSIM-Demo.zip</code>. </p> <p>Download AWSIM-Demo.zip</p> </li> <li> <p>Unzip the downloaded file.</p> </li> <li> <p>Make the <code>AWSIM-Demo.x86_64</code> file executable. Rightclick the <code>AWSIM-Demo.x86_64</code> file and check the <code>Execute</code> checkbox. </p> <p>or execute the command below.     <pre><code>chmod +x &lt;path to AWSIM folder&gt;/AWSIM-Demo.x86_64\n</code></pre></p> <p>Info</p> <p>If <code>AWSIM-Demo</code> is hefty, try AWSIM-Demo-LightWeight, a lightweight version.</p> </li> </ol> </li> </ol>"},{"location":"GettingStarted/QuickStartDemo/#4-run-awsim-and-autoware","title":"4. Run AWSIM and Autoware","text":"<p>It is recommended to launch in the order of <code>1.AWSIM -&gt; 2.Autoware</code>. Same procedure as the actual autoware's real vehicle.</p> <ol> <li> <p>Launch AWSIM demo</p> <ol> <li> <p>Double-click <code>AWSIM-Demo.x86_64</code> to start it. </p> </li> <li> <p>Check ros2 topic list (optional) <pre><code>cd &lt;autoware path&gt; &amp;&amp;\nsource install/setup.bash &amp;&amp;\nros2 topic list\n</code></pre> Result. Topics that AWSIM demo pub/subs. <pre><code>/clock\n/control/command/control_cmd\n/control/command/emergency_cmd\n/control/command/gear_cmd\n/control/command/hazard_lights_cmd\n/control/command/turn_indicators_cmd\n/parameter_events\n/rosout\n/sensing/camera/traffic_light/camera_info\n/sensing/camera/traffic_light/image_raw\n/sensing/gnss/pose\n/sensing/gnss/pose_with_covariance\n/sensing/imu/tamagawa/imu_raw\n/sensing/lidar/top/pointcloud_raw\n/sensing/lidar/top/pointcloud_raw_ex\n/vehicle/status/control_mode\n/vehicle/status/gear_status\n/vehicle/status/hazard_lights_status\n/vehicle/status/steering_status\n/vehicle/status/turn_indicators_status\n/vehicle/status/velocity_status\n</code></pre></p> </li> </ol> </li> <li> <p>Launch Autoware</p> <ol> <li> <p>Download <code>Shinjuku-Map.zip</code> and unzip them. Download Shinjuku-Map.zip</p> <p>Info</p> <p>Autoware-shinjuku-map.zip file contains map files for <code>pcd</code> and <code>osm</code>.</p> </li> <li> <p>Launch Autoware.</p> <pre><code>source install/setup.bash &amp;&amp;\nros2 launch autoware_launch e2e_simulator.launch.xml vehicle_model:=sample_vehicle sensor_model:=awsim_sensor_kit map_path:=&lt;your mapfile location&gt;\n</code></pre> <p>Warning</p> <p><code>&lt;your mapfile location&gt;</code> must be changed arbitrarily. When specifying the path the <code>~</code> operator cannot be used - please specify absolute full path.</p> <p></p> </li> </ol> </li> <li> <p>Start autonomous driving !</p> <ol> <li> <p>With both AWSIM and Autoware activated, check if the vehicle's self-position estimation is normal.</p> <p></p> </li> <li> <p>Set the navigation goal for the vehicle.</p> <p></p> </li> <li> <p>Check generate path and press \"Auto\" button.</p> <p></p> </li> <li> <p>Enable self-driving.</p> <p></p> <p>Info</p> <p>The default value of Autoware's maximum speed is 15 km/h. If you want more speed, you can modify it by entering the following command in the <code>autoware</code> directory. <pre><code>sed -i 's/max_vel: 4.17/max_vel: 22.2/' \\\n./src/launcher/autoware_launch/autoware_launch/config/planning/scenario_planning/common/common.paramyaml\n</code></pre></p> <p>Learn more about demo simulation.</p> <p>Demo details</p> </li> </ol> </li> </ol>"},{"location":"License/","title":"License","text":""},{"location":"License/#awsim-licenses","title":"AWSIM Licenses","text":"<p>AWSIM License Applies to tier4/AWSIM repositories and all content contained in the Releases https://github.com/tier4/AWSIM/releases.</p> <ul> <li> <p>AWSIM specific code is distributed under Apache2.0 License. The following extensions are included (<code>.cs</code> <code>.compute</code> <code>.xml</code>)</p> </li> <li> <p>AWSIM specific assets are distributed under CC BY-NC License. The following extensions are included (<code>.fbx</code> <code>.pcd</code> <code>.osm</code> <code>.png</code> <code>.anim</code> <code>.unitypackage</code> <code>.x86_64</code>)</p> </li> <li> <p>Hosting and publishing of AWSIM documents (docs/) is not permitted except for this web site.</p> </li> </ul>"},{"location":"License/#awsim-specific-code-is-distributed-under-apache20-license","title":"AWSIM specific code is distributed under Apache2.0 License.","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright 2025 TIER IV, Inc.</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"License/#awsim-specific-assets-are-distributed-under-cc-by-nc-license","title":"AWSIM specific assets are distributed under CC BY-NC License.","text":"<p>Attribution-NonCommercial 4.0 International</p> <p>=======================================================================</p> <p>Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.</p> <p>Using Creative Commons Public Licenses</p> <p>Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.</p> <pre><code> Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\nwiki.creativecommons.org/Considerations_for_licensees\n</code></pre> <p>=======================================================================</p> <p>Creative Commons Attribution-NonCommercial 4.0 International Public License</p> <p>By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.</p> <p>Section 1 -- Definitions.</p> <p>a. Adapted Material means material subject to Copyright and Similar      Rights that is derived from or based upon the Licensed Material      and in which the Licensed Material is translated, altered,      arranged, transformed, or otherwise modified in a manner requiring      permission under the Copyright and Similar Rights held by the      Licensor. For purposes of this Public License, where the Licensed      Material is a musical work, performance, or sound recording,      Adapted Material is always produced where the Licensed Material is      synched in timed relation with a moving image.</p> <p>b. Adapter's License means the license You apply to Your Copyright      and Similar Rights in Your contributions to Adapted Material in      accordance with the terms and conditions of this Public License.</p> <p>c. Copyright and Similar Rights means copyright and/or similar rights      closely related to copyright including, without limitation,      performance, broadcast, sound recording, and Sui Generis Database      Rights, without regard to how the rights are labeled or      categorized. For purposes of this Public License, the rights      specified in Section 2(b)(1)-(2) are not Copyright and Similar      Rights.   d. Effective Technological Measures means those measures that, in the      absence of proper authority, may not be circumvented under laws      fulfilling obligations under Article 11 of the WIPO Copyright      Treaty adopted on December 20, 1996, and/or similar international      agreements.</p> <p>e. Exceptions and Limitations means fair use, fair dealing, and/or      any other exception or limitation to Copyright and Similar Rights      that applies to Your use of the Licensed Material.</p> <p>f. Licensed Material means the artistic or literary work, database,      or other material to which the Licensor applied this Public      License.</p> <p>g. Licensed Rights means the rights granted to You subject to the      terms and conditions of this Public License, which are limited to      all Copyright and Similar Rights that apply to Your use of the      Licensed Material and that the Licensor has authority to license.</p> <p>h. Licensor means the individual(s) or entity(ies) granting rights      under this Public License.</p> <p>i. NonCommercial means not primarily intended for or directed towards      commercial advantage or monetary compensation. For purposes of      this Public License, the exchange of the Licensed Material for      other material subject to Copyright and Similar Rights by digital      file-sharing or similar means is NonCommercial provided there is      no payment of monetary compensation in connection with the      exchange.</p> <p>j. Share means to provide material to the public by any means or      process that requires permission under the Licensed Rights, such      as reproduction, public display, public performance, distribution,      dissemination, communication, or importation, and to make material      available to the public including in ways that members of the      public may access the material from a place and at a time      individually chosen by them.</p> <p>k. Sui Generis Database Rights means rights other than copyright      resulting from Directive 96/9/EC of the European Parliament and of      the Council of 11 March 1996 on the legal protection of databases,      as amended and/or succeeded, as well as other essentially      equivalent rights anywhere in the world.</p> <p>l. You means the individual or entity exercising the Licensed Rights      under this Public License. Your has a corresponding meaning.</p> <p>Section 2 -- Scope.</p> <p>a. License grant.</p> <pre><code>   1. Subject to the terms and conditions of this Public License,\n      the Licensor hereby grants You a worldwide, royalty-free,\n      non-sublicensable, non-exclusive, irrevocable license to\n      exercise the Licensed Rights in the Licensed Material to:\n\n        a. reproduce and Share the Licensed Material, in whole or\n           in part, for NonCommercial purposes only; and\n\n        b. produce, reproduce, and Share Adapted Material for\n           NonCommercial purposes only.\n\n   2. Exceptions and Limitations. For the avoidance of doubt, where\n      Exceptions and Limitations apply to Your use, this Public\n      License does not apply, and You do not need to comply with\n      its terms and conditions.\n\n   3. Term. The term of this Public License is specified in Section\n      6(a).\n\n   4. Media and formats; technical modifications allowed. The\n      Licensor authorizes You to exercise the Licensed Rights in\n      all media and formats whether now known or hereafter created,\n      and to make technical modifications necessary to do so. The\n      Licensor waives and/or agrees not to assert any right or\n      authority to forbid You from making technical modifications\n      necessary to exercise the Licensed Rights, including\n      technical modifications necessary to circumvent Effective\n      Technological Measures. For purposes of this Public License,\n      simply making modifications authorized by this Section 2(a)\n      (4) never produces Adapted Material.\n\n   5. Downstream recipients.\n\n        a. Offer from the Licensor -- Licensed Material. Every\n           recipient of the Licensed Material automatically\n           receives an offer from the Licensor to exercise the\n           Licensed Rights under the terms and conditions of this\n           Public License.\n\n        b. No downstream restrictions. You may not offer or impose\n           any additional or different terms or conditions on, or\n           apply any Effective Technological Measures to, the\n           Licensed Material if doing so restricts exercise of the\n           Licensed Rights by any recipient of the Licensed\n           Material.\n\n   6. No endorsement. Nothing in this Public License constitutes or\n      may be construed as permission to assert or imply that You\n      are, or that Your use of the Licensed Material is, connected\n      with, or sponsored, endorsed, or granted official status by,\n      the Licensor or others designated to receive attribution as\n      provided in Section 3(a)(1)(A)(i).\n</code></pre> <p>b. Other rights.</p> <pre><code>   1. Moral rights, such as the right of integrity, are not\n      licensed under this Public License, nor are publicity,\n      privacy, and/or other similar personality rights; however, to\n      the extent possible, the Licensor waives and/or agrees not to\n      assert any such rights held by the Licensor to the limited\n      extent necessary to allow You to exercise the Licensed\n      Rights, but not otherwise.\n\n   2. Patent and trademark rights are not licensed under this\n      Public License.\n\n   3. To the extent possible, the Licensor waives any right to\n      collect royalties from You for the exercise of the Licensed\n      Rights, whether directly or through a collecting society\n      under any voluntary or waivable statutory or compulsory\n      licensing scheme. In all other cases the Licensor expressly\n      reserves any right to collect such royalties, including when\n      the Licensed Material is used other than for NonCommercial\n      purposes.\n</code></pre> <p>Section 3 -- License Conditions.</p> <p>Your exercise of the Licensed Rights is expressly made subject to the following conditions.</p> <p>a. Attribution.</p> <pre><code>   1. If You Share the Licensed Material (including in modified\n      form), You must:\n\n        a. retain the following if it is supplied by the Licensor\n           with the Licensed Material:\n\n             i. identification of the creator(s) of the Licensed\n                Material and any others designated to receive\n                attribution, in any reasonable manner requested by\n                the Licensor (including by pseudonym if\n                designated);\n\n            ii. a copyright notice;\n\n           iii. a notice that refers to this Public License;\n\n            iv. a notice that refers to the disclaimer of\n                warranties;\n\n             v. a URI or hyperlink to the Licensed Material to the\n                extent reasonably practicable;\n\n        b. indicate if You modified the Licensed Material and\n           retain an indication of any previous modifications; and\n\n        c. indicate the Licensed Material is licensed under this\n           Public License, and include the text of, or the URI or\n           hyperlink to, this Public License.\n\n   2. You may satisfy the conditions in Section 3(a)(1) in any\n      reasonable manner based on the medium, means, and context in\n      which You Share the Licensed Material. For example, it may be\n      reasonable to satisfy the conditions by providing a URI or\n      hyperlink to a resource that includes the required\n      information.\n\n   3. If requested by the Licensor, You must remove any of the\n      information required by Section 3(a)(1)(A) to the extent\n      reasonably practicable.\n\n   4. If You Share Adapted Material You produce, the Adapter's\n      License You apply must not prevent recipients of the Adapted\n      Material from complying with this Public License.\n</code></pre> <p>Section 4 -- Sui Generis Database Rights.</p> <p>Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:</p> <p>a. for the avoidance of doubt, Section 2(a)(1) grants You the right      to extract, reuse, reproduce, and Share all or a substantial      portion of the contents of the database for NonCommercial purposes      only;</p> <p>b. if You include all or a substantial portion of the database      contents in a database in which You have Sui Generis Database      Rights, then the database in which You have Sui Generis Database      Rights (but not its individual contents) is Adapted Material; and</p> <p>c. You must comply with the conditions in Section 3(a) if You Share      all or a substantial portion of the contents of the database.</p> <p>For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.</p> <p>Section 5 -- Disclaimer of Warranties and Limitation of Liability.</p> <p>a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE      EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS      AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF      ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,      IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,      WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR      PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,      ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT      KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT      ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.</p> <p>b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE      TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,      NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,      INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,      COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR      USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN      ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR      DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR      IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.</p> <p>c. The disclaimer of warranties and limitation of liability provided      above shall be interpreted in a manner that, to the extent      possible, most closely approximates an absolute disclaimer and      waiver of all liability.</p> <p>Section 6 -- Term and Termination.</p> <p>a. This Public License applies for the term of the Copyright and      Similar Rights licensed here. However, if You fail to comply with      this Public License, then Your rights under this Public License      terminate automatically.</p> <p>b. Where Your right to use the Licensed Material has terminated under      Section 6(a), it reinstates:</p> <pre><code>   1. automatically as of the date the violation is cured, provided\n      it is cured within 30 days of Your discovery of the\n      violation; or\n\n   2. upon express reinstatement by the Licensor.\n\n For the avoidance of doubt, this Section 6(b) does not affect any\n right the Licensor may have to seek remedies for Your violations\n of this Public License.\n</code></pre> <p>c. For the avoidance of doubt, the Licensor may also offer the      Licensed Material under separate terms or conditions or stop      distributing the Licensed Material at any time; however, doing so      will not terminate this Public License.</p> <p>d. Sections 1, 5, 6, 7, and 8 survive termination of this Public      License.</p> <p>Section 7 -- Other Terms and Conditions.</p> <p>a. The Licensor shall not be bound by any additional or different      terms or conditions communicated by You unless expressly agreed.</p> <p>b. Any arrangements, understandings, or agreements regarding the      Licensed Material not stated herein are separate from and      independent of the terms and conditions of this Public License.</p> <p>Section 8 -- Interpretation.</p> <p>a. For the avoidance of doubt, this Public License does not, and      shall not be interpreted to, reduce, limit, restrict, or impose      conditions on any use of the Licensed Material that could lawfully      be made without permission under this Public License.</p> <p>b. To the extent possible, if any provision of this Public License is      deemed unenforceable, it shall be automatically reformed to the      minimum extent necessary to make it enforceable. If the provision      cannot be reformed, it shall be severed from this Public License      without affecting the enforceability of the remaining terms and      conditions.</p> <p>c. No term or condition of this Public License will be waived and no      failure to comply consented to unless expressly agreed to by the      Licensor.</p> <p>d. Nothing in this Public License constitutes or may be interpreted      as a limitation upon, or waiver of, any privileges and immunities      that apply to the Licensor or You, including from the legal      processes of any jurisdiction or authority.</p> <p>=======================================================================</p> <p>Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.</p> <p>Creative Commons may be contacted at creativecommons.org.</p>"}]}