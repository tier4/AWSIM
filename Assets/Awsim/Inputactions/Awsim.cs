//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Awsim/Inputactions/Awsim.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Awsim.EgoVehicle
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Awsim/Inputactions/Awsim.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @Awsim: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @Awsim()
        {
            asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""Awsim"",
    ""maps"": [
        {
            ""name"": ""Vehicle"",
            ""id"": ""4055cd52-14ff-44c6-a27c-952fd410b5e1"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""4ac7e49c-6b37-4592-9b33-f10f8f450b9c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""30c6e82b-05a9-4042-9c9b-a469159fac26"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DriveGear"",
                    ""type"": ""Button"",
                    ""id"": ""c145d04b-4155-4f8a-bd9e-abf93ba7273a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReverseGear"",
                    ""type"": ""Button"",
                    ""id"": ""8b4630de-cae2-4cdb-b3d8-f04174e7e119"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ParkingGear"",
                    ""type"": ""Button"",
                    ""id"": ""34123ce8-b7c4-4883-b2e8-431a0a1066ec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NeutralGear"",
                    ""type"": ""Button"",
                    ""id"": ""d0233732-badf-4b15-85a6-5acbf2fe7e0e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HazardSignal"",
                    ""type"": ""Value"",
                    ""id"": ""689033d2-50f2-4bf0-8f6c-27c6f1ed0f5c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftTurnSignal"",
                    ""type"": ""Button"",
                    ""id"": ""7266166e-5a65-4ff6-beb9-e8cd4c0b32bf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTurnSignal"",
                    ""type"": ""Button"",
                    ""id"": ""4a33f38f-fe21-440b-ae90-ed2f63c3f4de"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NoneTurnSignal"",
                    ""type"": ""Button"",
                    ""id"": ""bc7b8ee8-91fe-4138-b83c-9080d2904847"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OverrideSteering"",
                    ""type"": ""Button"",
                    ""id"": ""c62302a3-1cde-4005-9c97-e21e9e62ad2f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnSwitchAutonomous"",
                    ""type"": ""Button"",
                    ""id"": ""7e213b94-be27-45c6-a1b8-b1c481019402"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd60d085-9e30-4a52-a202-851614c912c3"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Z"",
                    ""interactions"": """",
                    ""processors"": ""Invert,Normalize(min=-1,max=1,zero=-1)"",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e68316e3-f552-44b8-aae7-37846729573a"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/RotateZ"",
                    ""interactions"": """",
                    ""processors"": ""Invert,Normalize(min=-1,max=1,zero=-1)"",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9c6af36-b642-4e34-88a5-c6c2ecccd512"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Top"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""066d1298-6358-404c-bdae-34fe833b8d2d"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Thumb"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReverseGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""419bdd44-f883-4729-94bd-697feb4725fa"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ParkingGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1aabd6d9-98ee-44de-bc7e-f8214ebd21e1"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Thumb2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NeutralGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b15ce26-fa31-4229-998e-f3c56195cfdd"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Pinkie"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTurnSignal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bed9b167-73ab-4097-9a20-b3f7243a216f"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Top2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTurnSignal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3b81702-efa3-4ba3-83f7-b3b46121ef93"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Base5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NoneTurnSignal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98b37843-ebdc-4103-8a75-d20b206eedcc"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Base"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Joystick"",
                    ""action"": ""HazardSignal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04b0bc74-bf60-4cc8-a20e-a82ddb10af27"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Base2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OverrideSteering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0657169b-6bcc-4361-959b-bffeecb1f6dd"",
                    ""path"": ""<Linux::LogitechInc::LogitechG29DrivingForceRacingWheel>/Base6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnSwitchAutonomous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Vehicle
            m_Vehicle = asset.FindActionMap("Vehicle", throwIfNotFound: true);
            m_Vehicle_Throttle = m_Vehicle.FindAction("Throttle", throwIfNotFound: true);
            m_Vehicle_Brake = m_Vehicle.FindAction("Brake", throwIfNotFound: true);
            m_Vehicle_DriveGear = m_Vehicle.FindAction("DriveGear", throwIfNotFound: true);
            m_Vehicle_ReverseGear = m_Vehicle.FindAction("ReverseGear", throwIfNotFound: true);
            m_Vehicle_ParkingGear = m_Vehicle.FindAction("ParkingGear", throwIfNotFound: true);
            m_Vehicle_NeutralGear = m_Vehicle.FindAction("NeutralGear", throwIfNotFound: true);
            m_Vehicle_HazardSignal = m_Vehicle.FindAction("HazardSignal", throwIfNotFound: true);
            m_Vehicle_LeftTurnSignal = m_Vehicle.FindAction("LeftTurnSignal", throwIfNotFound: true);
            m_Vehicle_RightTurnSignal = m_Vehicle.FindAction("RightTurnSignal", throwIfNotFound: true);
            m_Vehicle_NoneTurnSignal = m_Vehicle.FindAction("NoneTurnSignal", throwIfNotFound: true);
            m_Vehicle_OverrideSteering = m_Vehicle.FindAction("OverrideSteering", throwIfNotFound: true);
            m_Vehicle_OnSwitchAutonomous = m_Vehicle.FindAction("OnSwitchAutonomous", throwIfNotFound: true);
        }

        ~@Awsim()
        {
            UnityEngine.Debug.Assert(!m_Vehicle.enabled, "This will cause a leak and performance issues, Awsim.Vehicle.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Vehicle
        private readonly InputActionMap m_Vehicle;
        private List<IVehicleActions> m_VehicleActionsCallbackInterfaces = new List<IVehicleActions>();
        private readonly InputAction m_Vehicle_Throttle;
        private readonly InputAction m_Vehicle_Brake;
        private readonly InputAction m_Vehicle_DriveGear;
        private readonly InputAction m_Vehicle_ReverseGear;
        private readonly InputAction m_Vehicle_ParkingGear;
        private readonly InputAction m_Vehicle_NeutralGear;
        private readonly InputAction m_Vehicle_HazardSignal;
        private readonly InputAction m_Vehicle_LeftTurnSignal;
        private readonly InputAction m_Vehicle_RightTurnSignal;
        private readonly InputAction m_Vehicle_NoneTurnSignal;
        private readonly InputAction m_Vehicle_OverrideSteering;
        private readonly InputAction m_Vehicle_OnSwitchAutonomous;
        /// <summary>
        /// Provides access to input actions defined in input action map "Vehicle".
        /// </summary>
        public struct VehicleActions
        {
            private @Awsim m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public VehicleActions(@Awsim wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/Throttle".
            /// </summary>
            public InputAction @Throttle => m_Wrapper.m_Vehicle_Throttle;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/Brake".
            /// </summary>
            public InputAction @Brake => m_Wrapper.m_Vehicle_Brake;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/DriveGear".
            /// </summary>
            public InputAction @DriveGear => m_Wrapper.m_Vehicle_DriveGear;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/ReverseGear".
            /// </summary>
            public InputAction @ReverseGear => m_Wrapper.m_Vehicle_ReverseGear;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/ParkingGear".
            /// </summary>
            public InputAction @ParkingGear => m_Wrapper.m_Vehicle_ParkingGear;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/NeutralGear".
            /// </summary>
            public InputAction @NeutralGear => m_Wrapper.m_Vehicle_NeutralGear;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/HazardSignal".
            /// </summary>
            public InputAction @HazardSignal => m_Wrapper.m_Vehicle_HazardSignal;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/LeftTurnSignal".
            /// </summary>
            public InputAction @LeftTurnSignal => m_Wrapper.m_Vehicle_LeftTurnSignal;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/RightTurnSignal".
            /// </summary>
            public InputAction @RightTurnSignal => m_Wrapper.m_Vehicle_RightTurnSignal;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/NoneTurnSignal".
            /// </summary>
            public InputAction @NoneTurnSignal => m_Wrapper.m_Vehicle_NoneTurnSignal;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/OverrideSteering".
            /// </summary>
            public InputAction @OverrideSteering => m_Wrapper.m_Vehicle_OverrideSteering;
            /// <summary>
            /// Provides access to the underlying input action "Vehicle/OnSwitchAutonomous".
            /// </summary>
            public InputAction @OnSwitchAutonomous => m_Wrapper.m_Vehicle_OnSwitchAutonomous;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_Vehicle; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="VehicleActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(VehicleActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="VehicleActions" />
            public void AddCallbacks(IVehicleActions instance)
            {
                if (instance == null || m_Wrapper.m_VehicleActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_VehicleActionsCallbackInterfaces.Add(instance);
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @DriveGear.started += instance.OnDriveGear;
                @DriveGear.performed += instance.OnDriveGear;
                @DriveGear.canceled += instance.OnDriveGear;
                @ReverseGear.started += instance.OnReverseGear;
                @ReverseGear.performed += instance.OnReverseGear;
                @ReverseGear.canceled += instance.OnReverseGear;
                @ParkingGear.started += instance.OnParkingGear;
                @ParkingGear.performed += instance.OnParkingGear;
                @ParkingGear.canceled += instance.OnParkingGear;
                @NeutralGear.started += instance.OnNeutralGear;
                @NeutralGear.performed += instance.OnNeutralGear;
                @NeutralGear.canceled += instance.OnNeutralGear;
                @HazardSignal.started += instance.OnHazardSignal;
                @HazardSignal.performed += instance.OnHazardSignal;
                @HazardSignal.canceled += instance.OnHazardSignal;
                @LeftTurnSignal.started += instance.OnLeftTurnSignal;
                @LeftTurnSignal.performed += instance.OnLeftTurnSignal;
                @LeftTurnSignal.canceled += instance.OnLeftTurnSignal;
                @RightTurnSignal.started += instance.OnRightTurnSignal;
                @RightTurnSignal.performed += instance.OnRightTurnSignal;
                @RightTurnSignal.canceled += instance.OnRightTurnSignal;
                @NoneTurnSignal.started += instance.OnNoneTurnSignal;
                @NoneTurnSignal.performed += instance.OnNoneTurnSignal;
                @NoneTurnSignal.canceled += instance.OnNoneTurnSignal;
                @OverrideSteering.started += instance.OnOverrideSteering;
                @OverrideSteering.performed += instance.OnOverrideSteering;
                @OverrideSteering.canceled += instance.OnOverrideSteering;
                @OnSwitchAutonomous.started += instance.OnOnSwitchAutonomous;
                @OnSwitchAutonomous.performed += instance.OnOnSwitchAutonomous;
                @OnSwitchAutonomous.canceled += instance.OnOnSwitchAutonomous;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="VehicleActions" />
            private void UnregisterCallbacks(IVehicleActions instance)
            {
                @Throttle.started -= instance.OnThrottle;
                @Throttle.performed -= instance.OnThrottle;
                @Throttle.canceled -= instance.OnThrottle;
                @Brake.started -= instance.OnBrake;
                @Brake.performed -= instance.OnBrake;
                @Brake.canceled -= instance.OnBrake;
                @DriveGear.started -= instance.OnDriveGear;
                @DriveGear.performed -= instance.OnDriveGear;
                @DriveGear.canceled -= instance.OnDriveGear;
                @ReverseGear.started -= instance.OnReverseGear;
                @ReverseGear.performed -= instance.OnReverseGear;
                @ReverseGear.canceled -= instance.OnReverseGear;
                @ParkingGear.started -= instance.OnParkingGear;
                @ParkingGear.performed -= instance.OnParkingGear;
                @ParkingGear.canceled -= instance.OnParkingGear;
                @NeutralGear.started -= instance.OnNeutralGear;
                @NeutralGear.performed -= instance.OnNeutralGear;
                @NeutralGear.canceled -= instance.OnNeutralGear;
                @HazardSignal.started -= instance.OnHazardSignal;
                @HazardSignal.performed -= instance.OnHazardSignal;
                @HazardSignal.canceled -= instance.OnHazardSignal;
                @LeftTurnSignal.started -= instance.OnLeftTurnSignal;
                @LeftTurnSignal.performed -= instance.OnLeftTurnSignal;
                @LeftTurnSignal.canceled -= instance.OnLeftTurnSignal;
                @RightTurnSignal.started -= instance.OnRightTurnSignal;
                @RightTurnSignal.performed -= instance.OnRightTurnSignal;
                @RightTurnSignal.canceled -= instance.OnRightTurnSignal;
                @NoneTurnSignal.started -= instance.OnNoneTurnSignal;
                @NoneTurnSignal.performed -= instance.OnNoneTurnSignal;
                @NoneTurnSignal.canceled -= instance.OnNoneTurnSignal;
                @OverrideSteering.started -= instance.OnOverrideSteering;
                @OverrideSteering.performed -= instance.OnOverrideSteering;
                @OverrideSteering.canceled -= instance.OnOverrideSteering;
                @OnSwitchAutonomous.started -= instance.OnOnSwitchAutonomous;
                @OnSwitchAutonomous.performed -= instance.OnOnSwitchAutonomous;
                @OnSwitchAutonomous.canceled -= instance.OnOnSwitchAutonomous;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="VehicleActions.UnregisterCallbacks(IVehicleActions)" />.
            /// </summary>
            /// <seealso cref="VehicleActions.UnregisterCallbacks(IVehicleActions)" />
            public void RemoveCallbacks(IVehicleActions instance)
            {
                if (m_Wrapper.m_VehicleActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="VehicleActions.AddCallbacks(IVehicleActions)" />
            /// <seealso cref="VehicleActions.RemoveCallbacks(IVehicleActions)" />
            /// <seealso cref="VehicleActions.UnregisterCallbacks(IVehicleActions)" />
            public void SetCallbacks(IVehicleActions instance)
            {
                foreach (var item in m_Wrapper.m_VehicleActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_VehicleActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="VehicleActions" /> instance referencing this action map.
        /// </summary>
        public VehicleActions @Vehicle => new VehicleActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        /// <summary>
        /// Provides access to the input control scheme.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        /// <summary>
        /// Provides access to the input control scheme.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_TouchSchemeIndex = -1;
        /// <summary>
        /// Provides access to the input control scheme.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
        public InputControlScheme TouchScheme
        {
            get
            {
                if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
                return asset.controlSchemes[m_TouchSchemeIndex];
            }
        }
        private int m_JoystickSchemeIndex = -1;
        /// <summary>
        /// Provides access to the input control scheme.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
        public InputControlScheme JoystickScheme
        {
            get
            {
                if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
                return asset.controlSchemes[m_JoystickSchemeIndex];
            }
        }
        private int m_XRSchemeIndex = -1;
        /// <summary>
        /// Provides access to the input control scheme.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
        public InputControlScheme XRScheme
        {
            get
            {
                if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
                return asset.controlSchemes[m_XRSchemeIndex];
            }
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Vehicle" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="VehicleActions.AddCallbacks(IVehicleActions)" />
        /// <seealso cref="VehicleActions.RemoveCallbacks(IVehicleActions)" />
        public interface IVehicleActions
        {
            /// <summary>
            /// Method invoked when associated input action "Throttle" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnThrottle(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Brake" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnBrake(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "DriveGear" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnDriveGear(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "ReverseGear" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnReverseGear(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "ParkingGear" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnParkingGear(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "NeutralGear" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnNeutralGear(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "HazardSignal" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnHazardSignal(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "LeftTurnSignal" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnLeftTurnSignal(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "RightTurnSignal" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRightTurnSignal(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "NoneTurnSignal" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnNoneTurnSignal(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "OverrideSteering" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnOverrideSteering(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "OnSwitchAutonomous" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnOnSwitchAutonomous(InputAction.CallbackContext context);
        }
    }
}
